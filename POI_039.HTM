<!DOCTYPE HTML><script> ////////////////////////////// [003_POI][002_POI][001_POI]
                                                    // [003_POI][---=---][001_POI]
    console.log( "[_EVERYTHING_IS_OKAY_BABY_]" );   // [003_POI][002_POI][---=---]
                                                    // [---=---]
    //:#__ATOMIC_IVY_MMO_CONSTANTS__#:[23P]:=================://
                                                    //::[23P]://
        let c_sbx =( 640 ); //: @sbx@ : Sprite_Block.X :[23P]://
        let c_sby =( 896 ); //: @sby@ : Sprite_Block.Y :[23P]://
                                                    //::[---]://
        let c_tui_p2k =(0); //: $_TEX_UNI_IND_P2K_$   ::[24P]://
                                                    //::[---]://
        let c_clx =( 512 ); //: $_CENTER_LEVPACK_X_$  ::[31P]://
        let c_cly =( 512 ); //: $_CENTER_LEVPACK_Y_$  ::[31P]://
        let c_clw =( 512 ); //: $_CENTER_LEVPACK_W_$  ::[31P]://
        let c_clh =( 512 ); //: $_CENTER_LEVPACK_H_$  ::[31P]://
                                                    //::[---]://
        //:#_CAMERA_ARRAY_MEMBER_INDEXES_#:[39P]:------------://
                                //:                     [39P]://
            const   x_0 =( 0 ); //: Cam_Rect_Member.LEF [39P]://
            const   x_1 =( 1 ); //: Cam_Rect_Member.RIG [39P]://
            const   y_0 =( 2 ); //: Cam_Rect_Member.TOP [39P]://
            const   y_1 =( 3 ); //: Cam_Rect_Member.BOT [39P]://
                                //:                     [39P]://
        //:------------:#_CAMERA_ARRAY_MEMBER_INDEXES_#:[39P]://
        //:#_SPRITE_ATTRIBUTE_INDEXES_#:[35P]:---------------://
                                                    //::[35P]://
            const _sprite_attribute_indexes_=0 //:////::[35P]://
            ////                //:--------------:////::[35P]://
            ,   c_sai_gtx =( 1 )//: $_SAI_GTX_$ ::////::[35P]://
            ,   c_sai_gty =( 2 )//: $_SAI_GTY_$ ::////::[35P]://
            ////                //:             ::////::[35P]://
            ,   c_sai_dix =( 3 )//: $_SAI_DIX_$ ::////::[35P]://
            ,   c_sai_diy =( 4 )//: $_SAI_DIY_$ ::////::[35P]://
            ////                //:             ::////::[35P]://
            ,   c_sai_vel =( 5 )//: $_SAI_VEL_$ ::////::[35P]://
            ,   c_sai_acc =( 6 )//: $_SAI_ACC_$ ::////::[35P]://
            ,   c_sai_dra =( 7 )//: $_SAI_DRA_$ ::////::[35P]://
            ////                //:             ::////::[35P]://
            ,   c_sai_cx0 =( 8 )//: $_SAI_CX0_$ ::////::[35P]://
            ,   c_sai_cx1 =( 9 )//: $_SAI_CX1_$ ::////::[35P]://
            ,   c_sai_cy0 =(10 )//: $_SAI_CY0_$ ::////::[35P]://
            ,   c_sai_cy1 =(11 )//: $_SAI_CY1_$ ::////::[35P]://
            ////                //:             ::////::[35P]://
            ,   c_sai_hcx =(12 )//: $_SAI_HCX_$ ::////::[35P]://
            ,   c_sai_hcy =(13 )//: $_SAI_HCY_$ ::////::[35P]://
            ////                //:--------------:////::[35P]://
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;//::[35P]://
        //:---------------:#_SPRITE_ATTRIBUTE_INDEXES_#:[35P]://
        //:#_TILE_DISCRETE_UNITS_#:[38P]:--------------------://
                                       //:              [38P]://
            const c_dum = 0x780000   ; //: THE_DUM      [38P]://
            const c_duh = 0x280000   ; //: HOTEL        [38P]://
            const c_dur = 0x080000   ; //: ROOM         [38P]://
            const c_dut = 0x002000   ; //: TILE         [38P]://
                                       //:              [38P]://
            const c_du0 = 0x002000   ; //: te7==0 (01_X)[38P]://
            const c_du1 = 0x004000   ; //: te7==1 (02_X)[38P]://
            const c_du2 = 0x008000   ; //: te7==2 (04_X)[38P]://
            const c_du3 = 0x010000   ; //: te7==3 (08_X)[38P]://
            const c_du4 = 0x020000   ; //: te7==4 (16_X)[38P]://
            const c_du5 = 0x040000   ; //: te7==5 (32_X)[38P]://
            const c_du6 = 0x080000   ; //: te7==6 (64_X)[38P]://
                                       //:              [38P]://
        //:--------------------:#_TILE_DISCRETE_UNITS_#:[38P]://
                                                    //::[---]://
    //:=================:#__ATOMIC_IVY_MMO_CONSTANTS__#:[23P]://
    //:#__ATOMIC_IVY_MMO_GLOBALS__#:[20P]:===================://
                                                    //::[20P]://
        let d_pix2048 ; //: $_CPU_PIX2048_AND_GPU_P2K_$ [20P]://
        /// d_p2k     ; //: @p2k@ ::::: Only In Shaders [20P]://
        let d_p2k_loc ; //: @p2k_loc@ : p2k's LOCATION  [20P]://
                                                    //::[20P]://
        let d_tik ; //: @tik@ : game TIcKer (game_time) [20P][MOV][19P]://
        let d_tik_loc ; //:@tik_loc@ : tik's LOCATION   [20P][MOV][19P]://
                                                    //::[---]://
        let d_sss     ; //: @sss@ : Sprite_Screen_Size  [36P]://
        let d_sss_loc ; //: @loc@ : LOCATION of "sss"   [36P]://
                                                    //::[---]://
        let d_vpc =( new Uint32Array(4));//:$_D_VPC_$   [37P]://
        let d_vp0 =( new Uint32Array(4));//:$_D_VP0_$   [37P]://
        let d_vp1 =( new Uint32Array(4));//:$_D_VP1_$   [37P]://
                                                    //::[---]://
        let d_vpc_loc ; //: Location : ViewPort_CANVAS  [37P]://
        let d_vp0_loc ; //: Location : ViewPort_DESTIN  [37P]://
        let d_vp1_loc ; //: Location : ViewPort_SOURCE  [37P]://
                                                    //::[---]://
    //:===================:#__ATOMIC_IVY_MMO_GLOBALS__#:[20P]://
    //:#__CONSTANTS__#:[26P]:================================://
                                                    //::        [26P]://
        let c_hack_cpu_texture =( 0 );              //::[37P]   [26P]://
                                                    //::        [26P]://
    //:================================:#__CONSTANTS__#:[26P]://
    //:#__GLOBALS__#:[004_POI]:==============================://
                                                    //::[---]://
        let d_win ; //: @win@ : Global Window Object    [05P][004_POI]://
        let d_doc ; //: @doc@ : Global Document  OBJ    [07P]://
        let d_bod ; //: @bod@ : Global Document_Body    [07P]://
        let d_can ; //: @can@ : Global Canvas Object    [07P]://
        let d_wgl ; //: @wgl@ : Global WebGL  Context   [07P]://
        let d_wvc ; //: @wvc@ : Webgl_Version.CONTEXT   [07P]://
        let d_wvs ; //: @wvs@ : Webgl_Version.SHADER    [07P]://
                                                    //::[---]://
        let d_pmf ; //: @pmf@ : Precision_Medium_Float  [09P]://
        let d_sv1 ; //: @sv1@ : $_SRC_VERT_1_TILES_$    [09P]://
        let d_sf1 ; //: @sf1@ : $_SRC_FRAG_1_TILES_$    [09P]://
        let d_sv2 ; //: @sv2@ : $_SRC_VERT_2_POINT_$    [09P]://
        let d_sf2 ; //: @sf2@ : $_SRC_FRAG_2_POINT_$    [09P]://
                                                    //::[---]://
        let d_ver ; //: @ver@ : $_SYMBOLIC_CONST_V_$    [10P]://
        let d_fra ; //: @hor@ : $_SYMBOLIC_CONST_F_$    [10P]://
                                                    //::[---]://
        let d_ov1 ; //: @ov1@ : Object_VERT(shader)#1   [10P]://
        let d_of1 ; //: @of1@ : Object_FRAG(shader)#1   [10P]://
        let d_ov2 ; //: @ov2@ : Object_VERT(shader)#2   [10P]://
        let d_of2 ; //: @of2@ : Object_FRAG(shader)#2   [10P]://
                                                    //::[---]://    
        let d_hed ; //: @hed@ : shader HEaDer       //::[12P]://
                                                    //::[---]://
        let d_pid ; //: @pid@ : Program ID( object )    [13P]://
    let d_arr_pid ; //: @arr@ : ARRAY of ____ variable  [13P]://
                                                    //::[---]://
        let d_bytelen =( 2048 * 2048 * 4 );         //::[21P]://
        let d_p2k_tex ; //: d_p2k's texture handle    ::[22P]://
                                                    //::[---]://
        let d_marione =( 0 );//: $_MARIONETTE_$ :// //::[29P]://
        let d_orx     =( 0 );//: $_OFFSETRAWX_$ :// //::[29P]://
        let d_ory     =( 0 );//: $_OFFSETRAWY_$ :// //::[29P]://
                                                    //::[---]://
    //:==============================:#__GLOBALS__#:[004_POI]://
    //:#__ERROR__#:[08P]:====================================://
    let F_ERROR =(   i_msg )=>{                      //:[08P]://
        d_win.alert( i_msg );                        //:[08P]://
        throw(       i_msg );                        //:[08P]://
    };;                                              //:[08P]://
    //:====================================:#__ERROR__#:[08P]://
    //:#__PLAYER_CONTROL__#:[20P]:===========================://
    let F_PLAYER_CONTROL =( i_kev )=>{               //:[20P]://
                                                    //::[---]://
        let key =( i_kev.key  ||  "" );             //::[29P]://
            key =( key.toUpperCase() );             //::[29P]://
                                                    //::[29P]://
        //:- - - - - - - - - - - - - - - - - - -:// //::[29P]://
        //:hunterxhunter.fandom.com/wiki/Marione:// //::[29P]://
        //:- - - - - - - - - - - - - - - - - - -:// //::[29P]://
                                                    //::[29P]://
        //:#__CHOOSE_PLAYER__#:[29P]:------------------------://
                                                    //::[29P]://
        if( "0" === key ){ d_marione =( 0 ); };     //::[29P]://
        if( "1" === key ){ d_marione =( 1 ); };     //::[29P]://
        if( "2" === key ){ d_marione =( 2 ); };     //::[29P]://
        if( "3" === key ){ d_marione =( 3 ); };     //::[29P]://
        if( "4" === key ){ d_marione =( 4 ); };     //::[29P]://
        if( "5" === key ){ d_marione =( 5 ); };     //::[29P]://
        if( "6" === key ){ d_marione =( 6 ); };     //::[29P]://
        if( "7" === key ){ d_marione =( 7 ); };     //::[29P]://
        if( "8" === key ){ d_marione =( 8 ); };     //::[29P]://
        if( "9" === key ){ d_marione =( 9 ); };     //::[29P]://
                                                    //::[29P]://
        //:------------------------:#__CHOOSE_PLAYER__#:[29P]://
        //:#__PLAYER_OFFSET_RAW__#:[29P]:--------------------://
                                                    //::[29P]://
            d_orx =( 0 ); //: @orx@ : Offset_Raw_X      [29P]://
            d_ory =( 0 ); //: @ory@ : Offset_Raw_Y      [29P]://
                                                    //::[29P]://
            if( i_kev.keyCode === ( 37           )  //::[29P]://
            ||  i_kev.key     === ( "ARROWLEFT"  )  //::[29P]://
            ){                                      //::[29P]://
                d_orx =( 0-1 );                     //::[29P]://
            }else                                   //::[29P]://
            if( i_kev.keyCode === ( 38           )  //::[29P]://
            ||  i_kev.key     === ( "ARROWUP"    )  //::[29P]://
            ){                                      //::[29P]://
                d_ory =( 0-1 );                     //::[29P]://
            }else                                   //::[29P]://
            if( i_kev.keyCode === ( 39           )  //::[29P]://
            ||  i_kev.key     === ( "ARROWRIGHT" )  //::[29P]://
            ){                                      //::[29P]://
                d_orx =( 0+1 );                     //::[29P]://
            }else                                   //::[29P]://
            if( i_kev.keyCode === ( 40           )  //::[29P]://
            ||  i_kev.key     === ( "ARROWDOWN"  )  //::[29P]://
            ){                                      //::[29P]://
                d_ory =( 0+1 );                     //::[29P]://
            };;                                     //::[29P]://
        //:--------------------:#__PLAYER_OFFSET_RAW__#:[29P]://
        //:#_CPU_UPDATE_PLAYER_#:[30P]:----------------------://
                                                    //::[30P]://
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
            //: @s_m@   : Sprite_Memory           ::::::[30P]://
            //: @sac_x@ : SpriteAttributeColumn.X ::::::[30P]://
            //: @sac_y@ : SpriteAttributeColumn.Y ::::::[30P]://
            //: @sac_i@ : SpriteAttributeColumn.I ::::::[30P]://
            //: @sai@   : SpriteAttribute___INDEX ::::::[30P]://
            //: @sav@   : SpriteAttribute___VALUE ::::::[30P]://
            //:                                         [30P]://
            //: @dpi@   : Data_Pixel's INDEX Location   [30P]://
            //: @dpc@   : Data_Pixel's COMPONENT  Loc   [30P]://
            //:                                         [30P]://
            //: @d_x@   : Delta_X To Apply To Sprite POS[30P]://
            //: @d_y@   : Delta_Y To Apply To Sprite POS[30P]://
            //:- - - - - - - - - - - -- - - - - - - - - - - -://
                                                    //::[30P]://
            let s_m   =( d_pix2048 );;;;;;;;;;;;;;;;//::[30P]://
            let sac_x =( c_sbx + d_marione        );//::[30P]://
            let sac_y =( c_sby                    );//::[30P]://
            let sac_i =( sac_x + ( sac_y * 2048 ) );//::[30P]://
            let sai ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;//::[30P]://
            let sav ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;//::[30P]://
                                                    //::[30P]://
            let dpi ; //: @dpi@ : DataPixelIndex :////::[30P]://
            let dpc ; //: @dpc@ : DataPixelCompo :////::[30P]://
                                                    //::[30P]://
            let d_x =( d_orx * 0x7FFFFF );//:OFF_RAW_X*S[30P]://
            let d_y =( d_ory * 0x7FFFFF );//:OFF_RAW_Y*S[30P]://
                                                    //::[---]://
                d_x =( d_x * 8 );//:$_MOVE_FASTER_X_$   [34P]://
                d_y =( d_y * 8 );//:$_MOVE_FASTER_Y_$   [34P]://
                                                    //::[---]://
            for( sai = 1 ; sai <=( 2 ) ; sai ++ ){  //::[30P]://
                                                    //::[30P]://
                dpi =( sac_i + (2048*sai) );        //::[30P]://
                dpc =( dpi * 4 );                   //::[30P]://
                                                    //::[30P]://
                sav=( ( 0x00000000 )                //::[---]    [---][30P]://
                |   ( ( s_m[ dpc+0 ] )<< 24)        //::[33P]    [BUG][30P]://
                |   ( ( s_m[ dpc+1 ] )<< 16)        //::[33P]    [BUG][30P]://
                |   ( ( s_m[ dpc+2 ] )<<  8)        //::[33P]    [BUG][30P]://
                |   ( ( s_m[ dpc+3 ] )<<  0)        //::[33P]    [BUG][30P]://
                )>>>0 ;;;;;;;;;;;;;;;;;;;;;;        //::[---]    [---][30P]://
                                                    //::[30P]://
                if( 1 === sai ){ sav += d_x };      //::[30P]://
                if( 2 === sai ){ sav += d_y };      //::[30P]://
                                                    //::[30P]://
                //:SEE[ $_BYTE_EXTRACTION_LOGIC_$ ]:::::[30P]://
                //:SEE[ $_BEL_LOGIC_DOUBLE_CHEK_$ ]:::::[33P]://
                                                    //::[30P]://
                s_m[ dpc + 0 ]=(sav & 0xFF000000)>>>24 ;//:30://
                s_m[ dpc + 1 ]=(sav & 0x00FF0000)>>>16 ;//:30://
                s_m[ dpc + 2 ]=(sav & 0x0000FF00)>>> 8 ;//:30://
                s_m[ dpc + 3 ]=(sav & 0x000000FF)>>> 0 ;//:30://
                                                    //::[30P]://
            };;//:NEXT[ sai ]:::::::::::::::::::::::::::[30P]://
        //:----------------------:#_CPU_UPDATE_PLAYER_#:[30P]://  
        //:#_GPU_UPDATE_PLAYER_#:[31P]:----------------------://
        {   //:- - - - - - - - - - - -- - - - - - - - - - - -://                               
            //: @oib2048@ : Offset_In_Bytes : pix2048 ::[31P]://
            //: @symname@ : Symbolic_Name  :::::::::::::[31P]://
            //: @symvalu@ : Symbolic_Value :::::::::::::[31P]://
            //:- - - - - - - - - - - -- - - - - - - - - - - -://   
                                                     //:[31P]://
            let oib2048 =( 4*( c_clx+(c_cly*2048)) );//:[31P]://
            let symname =( d_wgl.UNPACK_ROW_LENGTH );//:[31P]://
            let symvalu =( 2048 );;;;;;;;;;;;;;;;;;;;//:[31P]://             
                                                    //::[31P]://
            d_wgl.pixelStorei( symname , symvalu );;//::[31P]://                                                 
            d_wgl.texSubImage2D(//::::::::::::::[ S_T_P_M_B ]://
                                //:                     [31P]://
                d_wgl.TEXTURE_2D//:TARGET               [31P]://
            ,     0             //:LEVEL ( @L_O_D@ )    [31P]://
                                //:                     [31P]://
            ,   c_clx , c_cly   //: $_CLP_ORG_$         [31P]://
            ,   c_clw , c_clh   //: $_CLP_MAG_$         [31P]://
                                //:                     [31P]://
                //:---------------------------------:   [31P]://
            ,   d_wgl.RGBA_INTEGER  //: $_SRC_FMT_$ :   [31P]://
            ,   d_wgl.UNSIGNED_BYTE //: $_SRC_TYP_$ :   [31P]://
                //:---------------------------------:   [31P]://
                            //:                         [31P]://
            ,   d_pix2048   //: ARRAY_BUFFER_VIEW       [31P]://
            ,     oib2048   //: SOURCE_OFFSET           [31P]://
            //:_________________________________________[31P]://
            );;//:::::::::::::::::::::::::::::::[ S_T_P_M_B ]://                    
        }                                           //::[31P]://
        //:----------------------:#_GPU_UPDATE_PLAYER_#:[31P]://
                                                    //::[---]://
    };;                                             //::[20P]://
    //:===========================:#__PLAYER_CONTROL__#:[20P]://
    //:#__CAMERA_CONTROL__#:[39P]:===========================://
    let F_CAMERA_CONTROL =( i_kev )=>{              //::[39P]://
                                                    //::[39P]://
        let key =( i_kev.key  ||  "" );             //::[39P]://
            key =( key.toUpperCase() );             //::[39P]://
                                                    //::[39P]://
        if( "_" === key || "-" === key ){           //::[39P]://
                                                    //::[39P]://
            console.log( "[_ZOOM_OUT_]" );          //::[39P]://
            ( d_vp1[ x_0 ] )-- ;                    //::[39P]://
            ( d_vp1[ x_1 ] )++ ;                    //::[39P]://
            ( d_vp1[ y_0 ] )-- ;                    //::[39P]://
            ( d_vp1[ y_1 ] )++ ;                    //::[39P]://
        }else                                       //::[39P]://
        if( "=" === key || "+" === key ){           //::[39P]://
                                                    //::[39P]://
            console.log( "[_ZOOM_INN_]" );          //::[39P]://
            ( d_vp1[ x_0 ] )++ ;                    //::[39P]://
            ( d_vp1[ x_1 ] )-- ;                    //::[39P]://
            ( d_vp1[ y_0 ] )++ ;                    //::[39P]://
            ( d_vp1[ y_1 ] )-- ;                    //::[39P]://
        };;                                         //::[39P]://
    };;                                             //::[39P]://
    //:===========================:#__CAMERA_CONTROL__#:[39P]://
    //:#__KEYBOARD_CONTROL__#:[39P]:=========================://
    let F_KEYBOARD_CONTROL =( i_kev )=>{            //::[39P]://
                                                    //::[39P]://
        F_PLAYER_CONTROL( i_kev );                  //::[39P]://
        F_CAMERA_CONTROL( i_kev );                  //::[39P]://
    };;                                             //::[39P]://
    //:=========================:#__KEYBOARD_CONTROL__#:[39P]://
    //:#__COMPILE_SHADER__#:[11P]:===========================://
    let F_COMPILE_SHADER =( i_wso )=>{               //:[11P]://
                                                     //:[11P]://
        let sym =( d_wgl.COMPILE_STATUS );           //:[11P]://
        let bol =( false );;;;;;;;;;;;;;;;           //:[11P]://
        let str =( null  );;;;;;;;;;;;;;;;           //:[11P]://
                                                     //:[11P]://
               d_wgl.compileShader(     i_wso     );;//:[11P]://
        bol =( d_wgl.getShaderParameter(i_wso,sym));;//:[11P]://
                                                     //:[11P]://
        if( ! bol ){                                 //:[11P]://
            str =(d_wgl.getShaderInfoLog(   i_wso ));//:[11P]://
            console.log( "[_FAIL_LOG_:STR]:" , str );//:[11P]://
            F_ERROR(     "[_$_UR_SHADER_SUCKS_$_]" );//:[11P]://
        };;                                          //:[11P]://
    };;                                              //:[11P]://
    //:===========================:#__COMPILE_SHADER__#:[11P]://
    //:#__SETUP__#:[05P]:====================================://
    let F_SETUP =( )=>{                             //::[05P]://
                                                    //::[05P]://
        d_win =( window               );;;;;;;;;;;; //::[05P]://
        d_doc =( window.document      );;;;;;;;;;;; //::[07P]://
                                                    //::[07P]://
        d_can =( d_doc.createElement( "canvas" ) ); //::[08P][MOV][07P]://
        d_bod =( d_doc.createElement( "body"   ) ); //::[08P]://
        d_doc.body =( d_bod );                      //::[08P]://
        if( d_bod != window.document.body ){        //::[08P]://
            F_ERROR( "[_BODY_ERROR_]" );            //::[08P]://
        };;                                         //::[08P]://
                                                    //::[---]://
        d_can.width=(  512 );;;;;;;;;;;;;;;;;;;;;;; //::[07P]://
        d_can.height=( 512 );;;;;;;;;;;;;;;;;;;;;;; //::[07P]://
                                                    //::[07P]://
        d_bod.appendChild( d_can );;;;;;;;;;;;;;;;; //::[07P]://
                                                    //::[07P]://
        d_wvc =( "webgl2"                  );;;;;;; //::[07P]://
        d_wvs =( "#version 300 es"         );;;;;;; //::[07P]://
        d_wgl =( d_can.getContext( d_wvc ) );;;;;;; //::[07P]://
        d_pmf =( "precision mediump float" );;;;;;; //::[09P]://
                                                    //::[---]://
        d_hed =( d_wvs  +  "\n"  +  d_pmf + ";" );; //::[12P]://
                                                    //::[---]://
        //:#__IAM_A_DIRTY_LIAR__#:[14P]:--------:// //::[14P]://
        d_sv1 =(d_hed)+(`                           //::[14P][09P]://
                                                    //::[---]://
          #define I_D ( gl_VertexID )               //::[15P]://
          #define F32 float                         //::[15P]://
                                                    //::[15P]://
            //:$_CAP_N_DIA_$:[15P]:-------------:// //::[15P]://
                                                    //::[15P]://
                const int v_x[4]=int[4]( 0,0,1,1 ); //::[15P]://
                const int v_y[4]=int[4]( 0,1,0,1 ); //::[15P]://
                                                    //::[15P]://
            //:-------------:$_CAP_N_DIA_$:[15P]:// //::[15P]://
                                                    //::[15P]://
            void main( ){   //::::::::[_v1main_]:// //::[---][14P]://
                                                    //::[15P]://
                gl_Position = vec4(                 //::[15P]://
                                                    //::[15P]://
                    1.0 -( F32( v_x[ I_D ] ) * 2.0 )//::[15P]://
                ,   1.0 -( F32( v_y[ I_D ] ) * 2.0 )//::[15P]://
                ,   0.0                             //::[15P]://
                ,   1.0                             //::[15P]://
                );;                                 //::[15P]://
                                                    //::[---]://
            }/////////////////////////[_v1main_]:// //::[14P]://
        `);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; //::[14P][09P]://
        //:--------:#__IAM_A_DIRTY_LIAR__#:[14P]:// //::[14P]://
                                                    //::[---]://
        d_sf1 =(d_hed)+(`                           //::[12P][09P]://
                                                    //::[---]://
            out vec4 f_c ;//: $_GL_FRAG_COLOR_$ :// //::[12P]://
                                                    //::[---]://
            #define I32 int     //: $_OCD_I32_$ :// //::[16P]://
            #define U32 uint    //: $_OCD_U32_$ :// //::[16P]://
            #define UV4 uvec4   //: $_OCD_UV4_$ :// //::[37P]://
                                                    //::[16P]://
            #define GREY_DARK  vec4(0.2,0.2,0.2,1)  //::[16P]://
            #define GREY_LIGHT vec4(0.8,0.8,0.8,1)  //::[16P]://
                                                    //::[16P]://
            #define IFX ( int( gl_FragCoord.x ) )   //::[16P]://
            #define IFY ( int( gl_FragCoord.y ) )   //::[16P]://
                                                    //::[---]://
            uniform UV4 d_vpc ; //:$_TILEMAP_VPC_$      [37P]://
            uniform UV4 d_vp0 ; //:$_TILEMAP_VP0_$      [37P]://
            uniform UV4 d_vp1 ; //:$_TILEMAP_VP1_$      [37P]://
                                                    //::[---]://
            void main( ){   //::::::::[_f1main_]:// //::[09P]://
                                                    //::[---]://
                I32 t_x ; //: @t_x@ : Tile Cell X       [16P]://
                I32 t_y ; //: @t_y@ : Tile Cell Y       [16P]://
                                                    //::[16P]://
                U32 e_x ; //: @e_x@ : Even Cell X ?     [16P]://
                U32 e_y ; //: @e_y@ : Even Cell Y ?     [16P]://
                                                    //::[16P]://
                t_x =( IFX / 64 );                  //::[16P]://
                t_y =( IFY / 64 );                  //::[16P]://
                                                    //::[16P]://
                e_x =( U32(t_x) & U32(1) );//:$_BOARD_$ [16P]://
                e_y =( U32(t_y) & U32(1) );//:$_BOARD_$ [16P]://
                                                    //::[16P]://
                if( e_x == e_y ){                   //::[16P]://
                    f_c =( GREY_DARK  );            //::[16P]://
                }else{                              //::[16P]://
                    f_c =( GREY_LIGHT );            //::[16P]://
                };;                                 //::[16P]://
                                                    //::[---]://
            }//:::::::::::::::::::::::[_f1main_]:// //::[09P]://
        `);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; //::[09P]://
                                                    //::[---]://
        //:#__NPC_RENDERER_VERT__#:[28P]:--------------------://
                                                    //::[---]://
        d_sv2 =(d_hed)+(`                           //::[12P][10P]://
                                                    //::[---]://
            #define T_F texelFetch                  //::[32P]://
            #define SBX int( ${ c_sbx } )           //::[32P]://
            #define SBY int( ${ c_sby } )           //::[32P]://
            #define IV2 ivec2                       //::[25P]://
            #define UV4 uvec4                       //::[25P]://
            #define F_7FFF  ( float(0x7FFF     ) )  //::[25P]://
            #define HALFMAX ( float(0x7FFFFFFF ) )  //::[28P]://
            #define U32 uint                        //::[19P]://
            #define U_7F   U32(0x7F  )              //::[19P]://  
            #define F32 float                       //::[18P]://
            #define SID ( gl_VertexID )             //::[18P]://
                                                    //::[18P]://
            precision highp usampler2D ;            //::[18P]://
            uniform   usampler2D d_p2k ;            //::[18P]://
            uniform U32 d_tik          ;            //::[19P]://
            uniform U32 d_sss          ;            //::[36P]://
                                                    //::[---]://
            void main( ){   //::::::::[_v2main_]:// //::[12P]://
                                                    //::[---]://
                IV2 ixy ; //: @ixy@ : Signed_INT.XY     [25P]://        
                UV4 tex ; //: @tex@ : U32 RGBA Texel    [25P]://
                U32 u_x ; //: @u_x@ : U32 X Position    [25P]://
                U32 u_y ; //: @u_y@ : U32 Y Position    [34P]://
                                                    //::[---]://
                F32 snx ; //: @snx@ : $_Sprite_NDC_X_$  [18P]://
                F32 sny ; //: @sny@ : $_Sprite_NDC_Y_$  [18P]://
                                                    //::[---]://
                F32 fss =( F32(d_sss) );//:$_F32_SSS_$  [36P]://
                                                    //::[---]://
                ixy.x =( SBX + SID );//:$_COL_SPRITE_$  [32P]   [25P]://
                ixy.y =( SBY + (0) );//:$_ROW_ATTRIB_$  [32P]   [25P]://
                                                    //::[---]://
                ixy.y++ ;;;;;;;;;;;;;;;;;;;;        //::[32P]://
                tex   =( T_F(d_p2k,ixy,0) );        //::[32P]   [25P]://
                u_x   =(   tex.r << 24              //::[25P]://
                         | tex.g << 16              //::[25P]://
                         | tex.b <<  8              //::[25P]://
                         | tex.a <<  0              //::[25P]://
                       );                           //::[25P]://
                                                    //::[---]://
                ixy.y++ ;;;;;;;;;;;;;;;;;;;;        //::[34P]://
                tex   =( T_F(d_p2k,ixy,0) );        //::[34P]://
                u_y   =(   tex.r << 24              //::[34P]://
                         | tex.g << 16              //::[34P]://
                         | tex.b <<  8              //::[34P]://
                         | tex.a <<  0              //::[34P]://
                       );                           //::[34P]://
                                                    //::[---]://
                snx=( (F32(u_x) / HALFMAX)-1.0   ); //::[28P]   [25P][18P]://
                sny=( (F32(u_y) / HALFMAX)-1.0   ); //::[34P]   [19P][18P]://
                                                    //::[18P]://
                gl_PointSize=( fss );               //::[36P]   [18P]://
                gl_Position = vec4(                 //::[18P]://
                                                    //::[18P]://
                    snx                             //::[18P]://
                ,   sny                             //::[18P]://
                ,   0.0                             //::[18P]://
                ,   1.0                             //::[18P]://
                );                                  //::[18P]://
                                                    //::[---]://
            }//:::::::::::::::::::::::[_v2main_]:// //::[12P]://
        `);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; //::[10P]://
                                                    //::[---]://
        //:--------------------:#__NPC_RENDERER_VERT__#:[28P]://
        //:#__NPC_RENDERER_FRAG__#:[28P]:--------------------://
                                                    //::[---]://
        d_sf2 =(d_hed)+(`                           //::[12P][10P]://
                                                    //::[---]://
            out vec4 sfc ;  //:$_SPRITE_FC_$://     //::[17P]://
                                                    //::[---]://
            void main( ){   //::::::::[_f2main_]:// //::[12P]://
                                                    //::[---]://
                sfc =vec4(0,1,0,1);//:GREEN://      //::[17P]://
                                                    //::[---]://
            }//:::::::::::::::::::::::[_f2main_]:// //::[12P]://
        `);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; //::[10P]://
                                                    //::[---]://
        //:--------------------:#__NPC_RENDERER_FRAG__#:[28P]://
                                                    //::[---]://
        //:#__VER_THEN_FRA__#:[09P]:----------://   //::[10P]://
                                                    //::[10P]://
            d_ver =( d_wgl.VERTEX_SHADER   );;;;;   //::[10P]://
            d_fra =( d_wgl.FRAGMENT_SHADER );;;;;   //::[10P]://
                                                    //::[10P]://
            d_ov1 = d_wgl.createShader(  d_ver );   //::[14P][10P]://
            d_ov2 = d_wgl.createShader(  d_ver );   //::[10P]://
            d_of1 = d_wgl.createShader(  d_fra );   //::[10P]://
            d_of2 = d_wgl.createShader(  d_fra );   //::[10P]://
                                                    //::[10P]://
            d_wgl.shaderSource(  d_ov1 , d_sv1 );   //::[14P][10P]://
            d_wgl.shaderSource(  d_ov2 , d_sv2 );   //::[10P]://
            d_wgl.shaderSource(  d_of1 , d_sf1 );   //::[10P]://
            d_wgl.shaderSource(  d_of2 , d_sf2 );   //::[10P]://
                                                    //::[---]://
            F_COMPILE_SHADER( d_ov1            );   //::[14P][11P][10P]://
            F_COMPILE_SHADER( d_ov2            );   //::[11P][10P]://
            F_COMPILE_SHADER( d_of1            );   //::[11P][10P]://
            F_COMPILE_SHADER( d_of2            );   //::[11P][10P]://
                                                    //::[---]://
        //:----------:#__VER_THEN_FRA__#:[09P]://   //::[10P]://
                                                    //::[---]://
        //:#__ALLOC_PID_ARR__#:[13P]:---------://   //::[13P]://
                                                    //::[13P]://
            d_arr_pid =( new Array( 2 ) );          //::[13P]://
                                                    //::[13P]://
        //:---------:#__ALLOC_PID_ARR__#:[13P]://   //::[13P]://
        //:#__PROGRAM_CREATION__#:[13P]:------://   //::[13P]://
                                                    //::[13P]://
            //:$_PROGRAM_ID_IS_OBJECT_IN_WGL_$://   //::[13P]://
                                                    //::[13P]://
            d_pid=d_wgl.createProgram();            //::[13P]://
            d_wgl.attachShader( d_pid , d_ov1 );    //::[14P][13P]://
            d_wgl.attachShader( d_pid , d_of1 );    //::[13P]://
            d_wgl.linkProgram(  d_pid );;;;;;;;;    //::[15P]://
                                                    //::[13P]://
            d_arr_pid[ 0 ]=(  d_pid );              //::[13P]://
                                                    //::[---]://
            d_pid=d_wgl.createProgram();            //::[17P]://
            d_wgl.attachShader( d_pid , d_ov2 );    //::[17P]://
            d_wgl.attachShader( d_pid , d_of2 );    //::[17P]://
            d_wgl.linkProgram(  d_pid );;;;;;;;;    //::[17P]://
                                                    //::[17P]://
            d_arr_pid[ 1 ]=( d_pid );               //::[17P]://
                                                    //::[---]://
        //:------:#__PROGRAM_CREATION__#:[13P]://   //::[13P]://
        //:#__PROGRAM_SELECT__#:[13P]:--------://   //::[13P]://
                                                    //::[13P]://
        //- d_wgl.useProgram(d_arr_pid[ 0 ]); -//   //::[17P][13P]://
                                                    //::[13P]://
        //:--------:#__PROGRAM_SELECT__#:[13P]://   //::[13P]://
        //:#__UNIFORM_INIT__#:[19P]:------------:// //::[19P]://
                                                    //::[19P]://
            d_tik =( 0-1 );//: Game Ticker Time :// //::[19P]://
                                                    //::[19P]://
        //:------------:#__UNIFORM_INIT__#:[19P]:// //::[19P]://
        //:#__UNIFORM_ADDRESSES__#:[19P]:-------:// //::[19P]://
                                                    //::[19P]://
            let GUL =( d_wgl                        //::[19P]://
                        .getUniformLocation         //::[19P]://
                        .bind( d_wgl ) );;;;        //::[19P]://
                                                    //::[---]://
            d_pid =( d_arr_pid[ 0 ] );;;;;;;;;;;;   //::[37P]://
            d_wgl.useProgram(d_pid  );;;;;;;;;;;;   //::[37P]://
            d_vpc_loc=( GUL( d_pid , "d_vpc" ));;   //::[37P]://
            d_vp0_loc=( GUL( d_pid , "d_vp0" ));;   //::[37P]://
            d_vp1_loc=( GUL( d_pid , "d_vp1" ));;   //::[37P]://
                                                    //::[---]://
            d_pid =( d_arr_pid[ 1 ] );;;;;;;;;;;;   //::[19P]://
            d_wgl.useProgram(d_pid  );;;;;;;;;;;;   //::[19P]://
            d_tik_loc=( GUL( d_pid , "d_tik" ));;   //::[19P]://
            d_p2k_loc=( GUL( d_pid , "d_p2k" ));;   //::[24P]://
            d_sss_loc=( GUL( d_pid , "d_sss" ));;   //::[36P]://
                                                    //::[19P]://
        //:-------:#__UNIFORM_ADDRESSES__#:[19P]:// //::[19P]://
        //:#__UNIFORM_ADDR_CHK__#:[27P]:--------:// //::[27P]://
        {                                           //::[27P]://
            let E =( F_ERROR     );                 //::[27P]://
            let L =( console.log );                 //::[34P]://
                                                    //::[27P]://
            if(null == d_tik_loc){ L("[_TIK_]"); }; //::[34P][27P]://
            if(null == d_p2k_loc){ E("[_P2K_]"); }; //::[27P]://
                                                    //::[27P]://
            if(null != d_p2k_loc){                  //::[27P]://
                                                    //::[27P]://
                console.log( "[P2K]:",d_p2k_loc);   //::[27P]://
            };;                                     //::[27P]://
        }                                           //::[27P]://
        //:--------:#__UNIFORM_ADDR_CHK__#:[27P]:// //::[27P]://
        //:#__WIREUP_KEYBOARD__#:[20P]:---------:// //::[20P]://
                                                    //::[20P]://
            d_doc.addEventListener(                 //::        [20P]://
                "keydown"        //: Event Type :// //::        [20P]://
            ,   F_KEYBOARD_CONTROL //: Callback :// //::[39P]   [20P]://
            );;                                     //::        [20P]://
                                                    //::[20P]://
        //:---------:#__WIREUP_KEYBOARD__#:[20P]:// //::[20P]://
        //:#__INIT_CPU_TEXTURE__#:[21P]:--------:// //::[21P]://
        {                                           //::[21P]://
            d_pix2048 =(new Uint8Array(d_bytelen)); //::[21P]://
                                                    //::[21P]://
        let dpx ; //: @dpx@ : Data_Pixel_X ::::::// //::[21P]://
        let dpy ; //: @dpy@ : Data_Pixel_Y ::::::// //::[21P]://
        let dpi ; //: @dpi@ : Data_Pixel_INDEX ::// //::[21P]://
        let dpc ; //: @dpc@ : Data_Pixel_COMPO ::// //::[21P]://
        for(dpy = 0 ; dpy <=( 2048-1 ) ; dpy++ ){   //::[21P]://
        for(dpx = 0 ; dpx <=( 2048-1 ) ; dpx++ ){   //::[21P]://
                                                    //::[21P]://
            dpi =( dpx + ( dpy * 2048 ) );          //::[21P]://
            dpc =( dpi * 4 );;;;;;;;;;;;;;          //::[21P]://
                                                    //::[21P]://
            d_pix2048[ dpc + 0 ]=( dpx % 255 );     //::[21P]://
            d_pix2048[ dpc + 1 ]=( dpy % 255 );     //::[21P]://
            d_pix2048[ dpc + 2 ]=( dpi % 255 );     //::[21P]://
            d_pix2048[ dpc + 3 ]=(      0xFF );     //::[21P]://
                                                    //::[21P]://
        };;};;                                      //::[21P]://
        }                                           //::[21P]://
        //:--------:#__INIT_CPU_TEXTURE__#:[21P]:// //::[21P]://
        //:#__HACK_CPU_TEXTURE__#:[26P]:--------:// //::[26P]://
        if( c_hack_cpu_texture >= 1 ){              //::[26P]://
                                                    //::[26P]://
            let dex ; //: @dex@ : Index of ____ :// //::[26P]://
            let m_i =( d_bytelen - 1 );             //::[26P]://
            if( m_i !=( (2048*2048*4)-1) ){         //::[26P]://
                                                    //::[26P]://
                F_ERROR( "[_$_BAD_MAX_DEX_$_]" );   //::[26P]://
            };;                                     //::[26P]://
            for(dex = 0 ; dex <=( m_i ) ; dex++){   //::[26P]://
                                                    //::[26P]://
                d_pix2048[ dex ]=( 0xFF );          //::[26P]://
            };;                                     //::[26P]://
        };;                                         //::[26P]://
        //:--------:#__HACK_CPU_TEXTURE__#:[26P]:// //::[26P]://
        //:#__ALLOC_GPU_TEXTURE__#:[22P]:-------:// //::[22P]://
                                                    //::[22P]://
            d_p2k_tex =( d_wgl.createTexture() );;  //::[22P]://
            //:        OPENGL[ glGenTextures() ]:// //::[22P]://
                                                    //::[---]://
            //:#_ACTIVATE_B4_BIND_#:[24P]:------:// //::[24P]://
                                                    //::[24P]://
                d_wgl.activeTexture(                //::[24P]://
                    d_wgl.TEXTURE0                  //::[24P]://
                +   c_tui_p2k                       //::[24P]://
                );;                                 //::[24P]://
            //:------:#_ACTIVATE_B4_BIND_#:[24P]:// //::[24P]://
                                                    //::[---]://
            d_wgl.bindTexture(                      //::[22P]://
                                                    //::[22P]://
                d_wgl.TEXTURE_2D  //: $_T_O_T_$ :// //::[22P]://
            ,   d_p2k_tex         //: $_T_HAN_$ :// //::[22P]://
            );;                                     //::[22P]://
            //:---------------------------------:// //::[22P]://
            //:                                 :// //::[22P]://
            //:  WARNING : " texStorage2D "     :// //::[22P]://
            //:  NOT_FOR : " WebGL2 " Context !!:// //::[22P]://
            //:                                 :// //::[22P]://
            //:---------------------------------:// //::[22P]://
                                                    //::[---]://
            //:#__PARAM_AND_STORE__#:[27P]:------------------://
                                                    //::[27P]://
            let __must_do_before_tex_image_2d__=0   //::[27P]://
            ,   t2d = d_wgl.TEXTURE_2D              //::[27P]://
            ,   _n_ = d_wgl.NEAREST                 //::[27P]://
            ,   _e_ = d_wgl.CLAMP_TO_EDGE           //::[27P]://
            ,   min = d_wgl.TEXTURE_MIN_FILTER      //::[27P]://
            ,   mag = d_wgl.TEXTURE_MAG_FILTER      //::[27P]://
            ,   _s_ = d_wgl.TEXTURE_WRAP_S          //::[27P]://
            ,   _t_ = d_wgl.TEXTURE_WRAP_T          //::[27P]://
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; //::[27P]://
            d_wgl.texParameteri( t2d, min , _n_ );; //::[27P]://
            d_wgl.texParameteri( t2d, mag , _n_ );; //::[27P]://
            d_wgl.texParameteri( t2d, _s_ , _e_ );; //::[27P]://
            d_wgl.texParameteri( t2d, _t_ , _e_ );; //::[27P]://
                                                    //::[27P]://
            d_wgl.pixelStorei(                      //::[27P]://
                                                    //::[27P]://
                d_wgl.UNPACK_ALIGNMENT              //::[27P]://
            ,   (4)                                 //::[27P]://
            );;                                     //::[27P]://
            //:------------------:#__PARAM_AND_STORE__#:[27P]://
                                                    //::[---]://
            d_wgl.texImage2D(  //:--:[ T_I_2_D ]:// //::[22P]://
                d_wgl.TEXTURE_2D    //:$_T_O_T_$:// //::[22P]://
            ,   0                   //:$_L_O_D_$:// //::[22P]://
            ,   d_wgl.RGBA8UI       //:$_C_FMT_$:// //::[22P]://
                //:-----------------------------:// //::[22P]://
            ,   2048     //: WIDTH  / PIX_WID   :// //::[22P]://
            ,   2048     //: HEIGHT / PIX_HIG   :// //::[22P]://
            ,   0        //: BORDER             :// //::[22P]://
                //:-----------------------------:// //::[22P]://
            ,   d_wgl.RGBA_INTEGER  //:$_G_FMT_$:// //::[22P]://
            ,   d_wgl.UNSIGNED_BYTE //:$_G_FMT_$:// //::[22P]://
            ,   d_pix2048 //: ARRAY_BUFFER_VIEW :// //::[22P]://
            );; //:-----------------:[ T_I_2_D ]:// //::[22P]://
                                                    //::[22P]://
        //:-------:#__ALLOC_GPU_TEXTURE__#:[22P]:// //::[22P]://
        //:#__WIRE_UP_SAMPLER__#:[24P]:---------:// //::[24P]://
        {                                           //::[24P]://
            let zero_offset=( 0 );                  //::[24P]://
                                                    //::[24P]://
            d_wgl.uniform1i(     d_p2k_loc          //::[24P]://
            ,  zero_offset + c_tui_p2k     );;      //::[24P]://
                                                    //::[24P]://
        };;                                         //::[24P]://
        //:---------:#__WIRE_UP_SAMPLER__#:[24P]:// //::[24P]://
                                                    //::[---]://
    };;                                             //::[05P]://
    //:====================================:#__SETUP__#:[05P]://
    ////////////////////////////////////////////////////////////
    //:#__LOOP_FOREVER__#:[06P]:=============================://
    let F_LOOP_FOREVER =( )=>{                      //::[06P]://
                                                    //::[06P]://
        console.log( "[ K_A_N_J_I ][ C_O_D_E_R ]" );//::[06P]://
                                                    //::[---]://
                                                    //::[---]://
        //:#__GAME_STATE_UPDATE__:[19P]:---------------------://
                                                    //::[---]://
            d_wgl.useProgram( d_arr_pid[ 0 ]    );  //::[37P]://
            d_wgl.uniform4uiv(d_vpc_loc , d_vpc );  //::[37P]://
            d_wgl.uniform4uiv(d_vp0_loc , d_vp0 );  //::[37P]://
            d_wgl.uniform4uiv(d_vp1_loc , d_vp1 );  //::[37P]://
                                                    //::[---]://
            d_wgl.useProgram( d_arr_pid[ 1 ]    );  //::[19P]://
                                          d_tik++;  //::[19P]://
            d_wgl.uniform1ui( d_tik_loc , d_tik );  //::[19P]://
                                                    //::[---]://
            d_sss =( d_tik % (64+1) );;;;;;;;;;;;;  //::[36P]://
            d_wgl.uniform1ui( d_sss_loc , d_sss );  //::[36P]://
                                                    //::[---]://
        //:---------------------:#__GAME_STATE_UPDATE__:[19P]://
        //:#__VIEWPORT_SETUP__:[14P]:------------------------://
                                                    //::[14P]://
            //:#__ALIGN_CONTEXT_TO_CANVAS__#:[14P]:----------://
                                                    //::[14P]://
                d_wgl.viewport( 0                   //::[14P]://
                            ,   0                   //::[14P]://
                            ,   d_can.width         //::[14P]://
                            ,   d_can.height        //::[14P]://
                );;                                 //::[14P]://
            //:----------:#__ALIGN_CONTEXT_TO_CANVAS__#:[14P]://
                                                    //::[14P]://
        //:------------------------:#__VIEWPORT_SETUP__:[14P]://
        //:#__CLEAR_SCREEN_AND_RENDER__#:[13P]:--------------://
                                                    //::[13P]://
            d_wgl.clear( d_wgl.COLOR_BUFFER_BIT );  //::[13P]://
            d_wgl.useProgram(d_arr_pid[ 0 ]);       //::[17P]://
            d_wgl.drawArrays(                       //::[13P]://
                d_wgl.TRIANGLE_STRIP                //::[14P][13P]://
            ,   0         //:$_1ST_VERT_DEX_$://    //::[14P][13P]://
            ,   4         //:$_NUM_VERT_IDS_$://    //::[14P][13P]://
            );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    //::[13P]://
                                                    //::[13P]://
        //:--------------:#__CLEAR_SCREEN_AND_RENDER__#:[13P]://
        //:#__SPRITES_ON_TOP__#:[17P]:-----------------------://
                                                     //:[17P]://
            d_wgl.useProgram( d_arr_pid[ 1 ]     );; //:[17P]://
            d_wgl.drawArrays( d_wgl.POINTS , 0,3 );; //:[17P]://
                                                     //:[17P]://
        //:-----------------------:#__SPRITES_ON_TOP__#:[17P]://
                                                    //::[---]://
        d_win.requestAnimationFrame(F_LOOP_FOREVER);//::[06P]://
    };;                                             //::[06P]://
    //:=============================:#__LOOP_FOREVER__#:[06P]://
    //:#__C99_MAIN__#:[06P]:=================================://
    let F_C99_MAIN =( )=>{                          //::[06P]://
                                                    //::[06P]://
        F_SETUP( ); F_LOOP_FOREVER( );              //::[06P]://
    };;                                             //::[06P]://
    //:=================================:#__C99_MAIN__#:[06P]://
    //:#__CALL_MAIN__#:[06P]:================================://
                                                    //::[06P]://
        F_C99_MAIN( );                              //::[06P]://
                                                    //::[06P]://
    //:================================:#__CALL_MAIN__#:[06P]://
                                                    // [---=---]
/**#__DOC_SEC__#:[004_POI]:************************ ** [004_POI]
                                                       [004_POI]
    #__DOC_SEC__# :::::: DOCumentation_SECtion         [004_POI]
    #__GLOBALS__# :::::: All global (filescope) vars   [004_POI]
    #__ERROR__# :::::::: Error Function Section            [08P]
    #__SETUP__# :::::::: 1 Time Environment Setup Code     [05P]
                                                           [---]
    #__LOOP_FOREVER__# : Infinite [game/render] loop       [06P]
    #__C99_MAIN__#:::::: C99 Style Main Entry Point        [06P]
    #__CALL_MAIN__# :::: Simulate running executable       [06P]
                                                           [---]
    @F_@    : Prefix used for FUNCTIONS   , UPPERCASE      [05P]
    @d_@    : Prefix used for global DATA , lowercase      [05P]
    @d_win@ : global window   object  _______________      [05P]
    @d_doc@ : global document object  _______________      [07P]
    @d_bod@ : global body     object  _______________      [07P]
    @d_can@ : global canvas object                         [07P]
    @d_wgl@ : global WebGL  Context                        [07P]
    @W_V@ ::: Webgl_Version                                [07P]
    @d_wvc@ : W_V.Context ( WGL Context Version )          [07P]
    @d_wvs@ : W_V.Shader  ( WGL Shader  Version Directive )[07P]
                                                           [---]
    @d_pmf@ :::: global_data(d_) : Precious_Mediump_Float  [09P]
    @_v1main_@ : BOGUS : No vertex shader #1 code.         [09P]
    @_f1main_@ : Frag(shader) #1 - Main , scope marker.    [09P]
                                                           [09P]
    @SRC_VERT@ : source(SRC) code for VERTEX   shader.     [09P]
    @SRC_FRAG@ : source(SRC) code for FRAGMENT shader.     [09P]
                                                           [09P]
    $_SRC_VERT_1_TILES_$ :--------------------------------:[09P]
    $_SRC_FRAG_1_TILES_$ :--------------------------------:[09P]
                                                           [09P]
        The shader source code strings for rendering the   [09P]
        __TILE_MAP__ behind the point sprites. This shader [09P]
        will just be a "placeholder" shader that fills     [09P]
        the screen some simple easy pattern using the      [09P]
        frag coords.                                       [09P]
                                                           [09P]
        $_SV1_NOT_NEEDED_$ :--------------------------:    [09P]
                                                      |    [09P]
            d_sv1=( "$_SV1_NOT_NEEDED_$" );           |    [09P]
                                                      |    [09P]
            To explicitly state that we DONT_NEED     |    [09P]
            a vertex shader to create our simple      |    [09P]
            tile map renderer, as we can partition    |    [09P]
            the 2D screen space using nothing but     |    [09P]
            "gl_FragCoord".                           |    [09P]
                                                      |    [09P]
        :--------------------------: $_SV1_NOT_NEEDED_$    [09P]
                                                           [09P]
        @d_sv1@ : global_DATA(d_) - Shader(src)Vertex   #1 [09P]
        @d_sf1@ : global_DATA(d_) - Shader(src)Fragment #1 [09P]
                                                           [09P]
    :--------------------------------: $_SRC_FRAG_1_TILES_$[09P]
    :--------------------------------: $_SRC_VERT_1_TILES_$[09P]
    $_SRC_VERT_2_POINT_$ :--------------------------------:[09P]
    $_SRC_FRAG_2_POINT_$ :--------------------------------:[09P]
                                                           [09P]
        The shader source code strings for rendering the   [09P]
        __POINT_SPRITES__ in front of the tilemap fragments[09P]
        rendered by the __PREVIOUS_SHADER__ . This is the  [09P]
        shader we will be using for rendering NPC and      [09P]
        __PLAYER__ characters . What we learn from this    [09P]
        shader will be used to write the code for the      [09P]
        [ ARTEMIS ]sub-system within[ ATOMIC_IVY_MMO.JS ]. [09P]
                                                           [09P]
        Atomic Ivy MMO Source : github.com/KANJICODER/AIM  [09P]
        AIM == Atomic.Ivy.MMO.: FILE[ ATOMIC_IVY_MMO.JS ]  [09P]
                                                           [09P]
        @d_sv2@ : global_DATA(d_) - Shader(src)Vertex   #2 [09P]
        @d_sf2@ : global_DATA(d_) - Shader(src)Fragment #2 [09P]
                                                           [09P]
    :--------------------------------: $_SRC_VERT_2_POINT_$[09P]
    :--------------------------------: $_SRC_FRAG_2_POINT_$[09P]
                                                           [---]
    $_SYMBOLIC_CONST_V_$ :--------------------------------:[10P]
    $_SYMBOLIC_CONST_F_$ :--------------------------------:[10P]
                                                           [10P]
        @_SYMBOLIC_CONST_V_@ : Symbolic constant (number)  [10P]
                             : that means "Vertex Shader". [10P]
                                                           [10P]
        @_SYMBOLIC_CONST_F_@ : Symbolic constant (number)  [10P]
                             : that means "Frag   Shader". [10P]
                                                           [10P]
    :--------------------------------:$_SYMBOLIC_CONST_F_$ [10P]
    :--------------------------------:$_SYMBOLIC_CONST_V_$ [10P]
    #__VER_THEN_FRA__# :----------------------------------:[10P]
                                                          |[10P]
        As we are grouping the different calls ,          |[10P]
        sub-group the calls by "vertex shader"            |[10P]
        stuff first , and "fragment shader stuff"         |[10P]
        second.                                           |[10P]
                                                          |[10P]
        I don't like arbitrary choice , so it seems       |[10P]
        to make sense to me to do the vertex things       |[10P]
        first since "vertex stage" comes before           |[10P]
        "fragment stage" in shader pipeline.              |[10P]
                                                          |[10P]
    :----------------------------------: #__VER_THEN_FRA__#[10P]
                                                           [---]
    #__COMPILE_SHADER__# :--------------------------------:[11P]
                                                          |[11P]
        A wrapper function that compiles the shader       |[11P]
        and then error checks it, we have this wrapper    |[11P]
        function so as to not wreck the flow of the       |[11P]
        code in the[ VER_THEN_FRA ]section after we       |[11P]
        refactor it to use __OUR__ custom compile         |[11P]
        shader wrapper function.                          |[11P]
                                                          |[11P]
      @i_wso@ : INPUT(param) : Webgl_Shader_Object        |[11P]
        @wso@ : Webgl_Shader_Object                       |[11P]
        @sym@ : general use symbolic constant variable    |[11P]
        @bol@ : general use           boolean variable    |[11P]
        @str@ : general use           string  variable    |[11P]
                                                          |[11P]
        [ sym ] : In this function is COMPILE_STATUS sym  |[11P]
        [ bol ] : In this function is COMPILE_STATUS bol  |[11P]
        [ str ] : In this function is ShaderInfoLog  str  |[11P]
                                                          |[11P]
    :--------------------------------: #__COMPILE_SHADER__#[11P]
    $_FAIL_LOG_$ :----------------------------------------:[11P]
                                                          |[11P]
        Denoting that I am logging out a "logging message"|[11P]
        that will hopefully explain why whatever I am     |[11P]
        doing in [ WebGl / OpenGL ] is failing right now. |[11P]
                                                          |[11P]
    :----------------------------------------: $_FAIL_LOG_$[11P]
    $_UR_SHADER_SUCKS_$ :---------------------------------:[11P]
                                                          |[11P]
        Positive words of encouragement to help whoever   |[11P]
        wrote this code get their /f/u/c/k/i/n/g/ act     |[11P]
        together and write some decent god-fearing ,      |[11P]
        church-going respectable code that adheres to     |[11P]
        our traditions of human-readble pronouncable      |[11P]
        names that sound like english.                    |[11P]
                                                          |[11P]
        All hail the church of LegoNamingCamelCaseJavaBullshit !
                                                          |[11P]
        It probably won't happen though. I hear the       |[11P]
        author is completely off their rocker.            |[11P]
        Abbreviates /s/h/i/t/ like it is assembly         |[11P]
        code or something.                                |[11P]
                                                          |[11P]
    :---------------------------------: $_UR_SHADER_SUCKS_$[11P]

    @d_hed@ : data_global(d_) shader common HEADER         [12P]
                                                           [12P]
    $_DO_NOTHING_SHADER_4_NOW_$ :-------------------------:[12P]
                                                          |[12P]
        Before we worry about shader pipeline #2 ,        |[12P]
        we need to get the first rendering pass           |[12P]
        working correctly.                                |[12P]
                                                          |[12P]
        The 1st rendering pass being our placeholder      |[12P]
        tilemap renderer that the sprite renderer is      |[12P]
        going to render on top of.                        |[12P]
                                                          |[12P]
        An empty "void main(){}" is all that is           |[12P]
        required to pass shader compilation.              |[12P]
                                                          |[12P]
    :-------------------------: $_DO_NOTHING_SHADER_4_NOW_$[12P]
    $_GL_FRAG_COLOR_$ :-----------------------------------:[12P]
                                                          |[12P]
        The built-in variable "gl_FragColor" is only      |[12P]
        available in WebGL1. In WebGL2 and in modern      |[12P]
        OpenGL ES versions , it has been deprecated in    |[12P]
        favor of using the output location qualifiers     |[12P]
        in the fragment shader.                           |[12P]
                                                          |[12P]
    :-----------------------------------: $_GL_FRAG_COLOR_$[12P]

    $_PROGRAM_ID_IS_OBJECT_IN_WGL_$ :---------------------:[13P]
    ?_FAKEID_? :------------------------------------------:[13P]
    ?_PID_V_POB_? :---------------------------------------:[13P]
                                                          |[13P]
        "program id" is actually an OBJECT in WebGL .     |[13P]
        When converting WebGL to OpenGL , "program id"    |[13P]
        will be of the correct type. That is why I        |[13P]
        wrote it this way.                                |[13P]
                                                          |[13P]
        @FAKEID@ : It's a "Fake ID" , it's actually a     |[13P]
                 : "program object" , but if there were   |[13P]
                 : OpenGL it would be an Uint32 ID.       |[13P]
                                                          |[13P]
        @PIV_V_POB@ : Program_ID -versus- Program_OBject  |[13P]
                                                          |[13P]
        @pid@ : ............. Program_ID                  |[13P]
        @pob@ : ............. Program_OBJect              |[13P]
        @d_pob: global_Data - Program_OBject              |[13P]
        @d_pid: global_Data - Program_ID                  |[13P]
                                                          |[13P]
        < WEB  GL Conext > . createProgram ===> POB       |[13P]
        < OPEN GL Conext > . createProgram ===> PID       |[13P]
                                                          |[13P]
        Because we are writing our code with the          |[13P]
        intentions of converting it to C99 in the         |[13P]
        future, we are going to call the variable         |[13P]
        by it's C99 name , even though that might         |[13P]
        be confusing because that is __NOT__ it's         |[13P]
        real underlying type in JavaScript.               |[13P]
                                                          |[13P]
        @d_pid@ : Global Program ID , use same name in    |[13P]
                : WEBGL & OPENGL , even though in WEBGL   |[13P]
                : this is actually a "Program Object"     |[13P]
                : rather than a UINT32 Handle.            |[13P]
                                                          |[13P]
    :---------------------------------------: ?_PID_V_POB_?[13P]
    :------------------------------------------: ?_FAKEID_?[13P]
    :---------------------: $_PROGRAM_ID_IS_OBJECT_IN_WGL_$[13P]
    #__ALLOC_PID_ARR__# :---------------------------------:[13P]
                                                          |[13P]
        Allocated PID Array.                              |[13P]
        Allocated Program ID Array.                       |[13P]
                                                          |[13P]
        NOTE : "PID" is actually an object in WEBGL ,     |[13P]
             : "PID" is just a U32 handle in OPENGL .     |[13P]
                                                          |[13P]
    :---------------------------------: #__ALLOC_PID_ARR__#[13P]
    #__PROGRAM_CREATION__# :------------------------------:[13P]
                                                          |[13P]
        Lets create and setup our program so that we      |[13P]
        are ready to invoke our shader each screen        |[13P]
        re-draw.                                          |[13P]
                                                          |[13P]
        Every time the screen is redrawn the callback     |[13P]
        registered with "requestAnimationFrame" will      |[13P]
        be fired, inside that callback we should be       |[13P]
        calling "d_wgl.drawArrays()".                     |[13P]
                                                          |[13P]
        It's kind of weird to say "drawArrays()"          |[13P]
        because that implies we have a vertex array       |[13P]
        to draw, which is typical in __MOST__ render      |[13P]
        pipelines. But we __DONT__ have any arrays        |[13P]
        to draw....                                       |[13P]
                                                          |[13P]
        You can think of "drawArrays" as meaning :        |[13P]
                                                          |[13P]
            Draw the screen with a STRONG RECOMMENDATION  |[13P]
            that you have an array of vertex information  |[13P]
            to render.                                    |[13P]
                                                          |[13P]
        Currently the function drawing our screen is      |[13P]
        the "LOOP_FOREVER" function.                      |[13P]
                                                          |[13P]
    :------------------------------: #__PROGRAM_CREATION__#[13P]
    #__PROGRAM_SELECT__# :--------------------------------:[13P]
                                                          |[13P]
        Select the program to use. For now we are going   |[13P]
        to use the "fake tilemap shader" , eventually     |[13P]
        we actually want to use BOTH PROGRAMS each        |[13P]
        screen redraw. Calling the tilemap shader         |[13P]
        pipeline first to render the tilemap, then        |[13P]
        the point sprite shader pipeline to render        |[13P]
        the sprites on top of the tilemap.                |[13P]
                                                          |[13P]
    :--------------------------------: #__PROGRAM_SELECT__#[13P]

    #__IAM_A_DIRTY_LIAR__# :------------------------------:[14P]
                                                          |[14P]
        I am a dirty liar. Even though we don't need      |[14P]
        a vertex shader for the tilemap renderer...       |[14P]
        We still at least need an __EMPTY__ vertex        |[14P]
        shader to make a valid program object.            |[14P]
                                                          |[14P]
        In Other Words :                                  |[14P]
                                                          |[14P]
                : Valid webgl program object requires ::: |[14P]
                : at minimum a vertex and fragment    ::: |[14P]
                : shader, even if they contain        ::: |[14P]
                : just an empty "void main".          ::: |[14P]
                                                          |[14P]
        $_NO_VERT_LOGIC_IN_TILE_MAP_$ :------------:      |[14P]
                                                   |      |[14P]
            No vertex transformation logic in our  |      |[14P]
            tilemap shader, all we need is an      |      |[14P]
            empty void main. We still must have    |      |[14P]
            a[ void_main ]but is can be empty.     |      |[14P]
                                                   |      |[14P]
        :------------: $_NO_VERT_LOGIC_IN_TILE_MAP_$      |[14P]
                                                          |[14P]
                                                          |[14P]
    :------------------------------: #__IAM_A_DIRTY_LIAR__#[14P]
    #__VIEWPORT_SETUP__# :--------------------------------:[14P]
                                                          |[14P]
        Make sure the webgl context size matches          |[14P]
        the size of our canvas. Eventually we also        |[14P]
        want to make sure the cavas size is always        |[14P]
        the size of our browser's client area.            |[14P]
                                                          |[14P]
        But for now, lets just focus on getting the       |[14P]
        intial 512__X__512 render working.                |[14P]
                                                          |[14P]
    :--------------------------------: #__VIEWPORT_SETUP__#[14P]
    #__ALIGN_CONTEXT_TO_CANVAS__# :-----------------------:[14P]
                                                          |[14P]
        "Align context to canvas" isn't the most accurate |[14P]
        way to describe what we are doing. In more        |[14P]
        accurate terms we are :                           |[14P]
                                                          |[14P]
            Setting the viewport of the WebGL             |[14P]
            rendering context to match the                |[14P]
            dimensions of the canvas.                     |[14P]
                                                          |[14P]
    :-----------------------:#__ALIGN_CONTEXT_TO_CANVAS__#:[14P]

    $_CAP_N_DIA_$ :---------------------------------------:[15P]
                                                          |[15P]
        @BIG_N@ : BIG "N" , literally drawing a big "N"   |[15P]
                : using 4 verts, which can create         |[15P]
                : 2 triangles to cover the entire         |[15P]
                : screen in homogeneous coordinates.      |[15P]
                                                          |[15P]
            +-------+      +-------+                      |[15P]
            |       |      |       |                      |[15P]
            | (0,1) |      | (1,1) |    (#,#)==(v_x,v_y)  |[15P]
            |       |      |       |                      |[15P]
            +---+---+      +---+---+                      |[15P]
                ^    \         ^                          |[15P]
                ^     \        ^                          |[15P]
                ^      \       ^                          |[15P]
                ^       \      ^                          |[15P]
                ^        \     ^                          |[15P]
                ^         \    ^                          |[15P]
            +---+---+      +---+---+                      |[15P]
            |       |      |       |                      |[15P]
            | (0,0) |      | (1,0) |                      |[15P]
            |       |      |       |                      |[15P]
            +-------+      +-------+                      |[15P]
                                                          |[15P]
            The "BIG_N" here is __NOT__ in homogeneous    |[15P]
            coordinates however, so we need to apply      |[15P]
            a formula so that :                           |[15P]
                                                          |[15P]
            ( 0 )====>( -1 )                              |[15P]
            ( 1 )====>( +1 )                              |[15P]
                                                          |[15P]
            +-----------------+-----------------+         |[15P]
            |                 |                 |         |[15P]
            |                                   |         |[15P]
            |                 |                 |         |[15P]
            + - - - - - - -( 0,0 )- - - - - - - +         |[15P]
            |                 |                 |         |[15P]
            |                                   |         |[15P]
            |                 |                 |         |[15P]
            +-----------------+-----------------+         |[15P]
                                                          |[15P]
        In WebGL , a RIGHT handed coordinate system is    |[15P]
        used. This is because /G/U/N/S/ are used with     |[15P]
        your RIGHT_HAND and WebGL is trying to shoot      |[15P]
        you in the face with bullets that have a          |[15P]
        positive forward velocity.                        |[15P]
                                                          |[15P]
        Hope this helps,                                  |[15P]
                                                          |[15P]
        - KanjiCoder                                      |[15P]
                                                          |[15P]
    :---------------------------------------:$_CAP_N_DIA_$:[15P]
    $_1ST_VERT_DEX_$ :------------------------------------:[15P]
                                                          |[15P]
        The index of the first vertex to start drawing.   |[15P]
        I would keep this at ZERO because looks like      |[15P]
        different versions of [WEBGL/OPENGL]don't agree   |[15P]
        on if this value is relative or absolute.         |[15P]
                                                          |[15P]
        But if we keep it at zero , all implementations   |[15P]
        of [OPENGL/WEBGL] will assume first value of      |[15P]
        [ gl_VertexID ]is ZERO(0).                        |[15P]
                                                          |[15P]
    :------------------------------------:$_1ST_VERT_DEX_$:[15P]
    $_NUM_VERT_IDS_$ :------------------------------------:[15P]
                                                          |[15P]
        Total number of verts to draw ,                   |[15P]
        starting at 1ST_VERT_DEX .                        |[15P]
                                                          |[15P]
    :------------------------------------:$_NUM_VERT_IDS_$:[15P]

    $_OCD_I32_$ :-----------------------------------------:[16P]
    $_OCD_U32_$ :-----------------------------------------:[16P]
                                                          |[16P]
        @OCD_I32@ : ObsessiveCompulsiveDisorder -  Int32  |[16P]
        @OCD_U32@ : ObsessiveCompulsiveDisorder - Uint32  |[16P]
                                                          |[16P]
        I like when things line up, and this particular   |[16P]
        difference between signed and un-signed integers  |[16P]
        really bothers me because of how it causes        |[16P]
        my source code to slightly[stagger/mal-align].    |[16P]
                                                          |[16P]
    :-----------------------------------------:$_OCD_U32_$:[16P]
    :-----------------------------------------:$_OCD_I32_$:[16P]
    $_BOARD_$ :-------------------------------------------:[16P]
                                                           [16P]
        We are making a checkerboard. When the X and       [16P]
        Y address of the[ cell/square ]are                 [16P]
                                                           [16P]
            [ BOTH EVEN ]OR[ BOTH ODD ]                    [16P]
                                                           [16P]
        We color the cell[ DARK_GREY ].                    [16P]
                                                           [16P]
        Let's make a quick truth table diagram where       [16P]
        we label all of the cells where odd-even match.    [16P]
                                                           [16P]
        +---------+---------+---------+---------+---------+[16P]
        |  EVE_X  |         |  EVE_X  |         |  EVE_X  |[16P]
        |         |         |         |         |         |[16P]
        |  EVE_Y  |         |  EVE_Y  |         |  EVE_Y  |[16P]
        +---------+---------+---------+---------+---------+[16P]
        |         |  ODD_X  |         |  ODD_X  |         |[16P]
        |         |         |         |         |         |[16P]
        |         |  ODD_Y  |         |  ODD_Y  |         |[16P]
        +---------+---------+---------+---------+---------+[16P]
        |  EVE_X  |         |  EVE_X  |         |  EVE_X  |[16P]
        |         |         |         |         |         |[16P]
        |  EVE_Y  |         |  EVE_Y  |         |  EVE_Y  |[16P]
        +---------+---------+---------+---------+---------+[16P]
        |         |  ODD_X  |         |  ODD_X  |         |[16P]
        |         |         |         |         |         |[16P]
        |         |  ODD_Y  |         |  ODD_Y  |         |[16P]
        +---------+---------+---------+---------+---------+[16P]
        |  EVE_X  |         |  EVE_X  |         |  EVE_X  |[16P]
        |         |         |         |         |         |[16P]
        |  EVE_Y  |         |  EVE_Y  |         |  EVE_Y  |[16P]
        +---------+---------+---------+---------+---------+[16P]
                                                           [16P]
    :-------------------------------------------:$_BOARD_$:[16P]

    [ FUTURE_ORPHAN ] :-----------------------------------:[17P]
                                                          |[17P]
     @FUTURE_ORPHAN_SECTION@ : Section will be orphaned ! |[17P]
                                                          |[17P]
            A comment section that will eventually __NOT__|[17P]
            point to any code in top of file once we move |[17P]
            onto deltas higher than the one the section   |[17P]
            was originally written in.                    |[17P]
                                                          |[17P]
    :-----------------------------------:[ FUTURE_ORPHAN ]:[17P]
    $__NEXT_VIDEO_SPRITE_LOGIC__$ :-----------------------:[17P]
                                                          |[17P]
        @FUTURE_ORPHAN_SECTION@                           |[17P]
                                                          |[17P]
        We already wrote too much code in delta #17(17P). |[17P]
        We will insert code for sprite size and           |[17P]
        position here in the next [video/delta].(#18(18P))|[17P]
                                                          |[17P]
    :-----------------------:$__NEXT_VIDEO_SPRITE_LOGIC__$:[17P]
    $_SPRITE_FC_$ :---------------------------------------:[17P]
                                                          |[17P]
        The sprite fragment color , named "sfc" to        |[17P]
        differentiate itself from the "f_c" in the        |[17P]
        tilemap shader. Eventually we need to refactor    |[17P]
        "f_c" to "tfc" because :                          |[17P]
                                                          |[17P]
        BAD_DESIGN :                                      |[17P]
            f_c IMPLIES  TILEMAP's FRAG_COLOR             |[17P]
            sfc EXPLICIT SPRITE's  FRAG_COLOR             |[17P]
                                                          |[17P]
        GOOD_DESIGN:                                      |[17P]
            tfc EXPLICIT TILEMAP's FRAG_COLOR             |[17P]
            sfc EXPLICIT SPRITE's  FRAG_COLOR             |[17P]
                                                          |[17P]
        @f_c@ : Fragment_Color , generic.                 |[17P]
        @tfc@ : Tilemap_Fragment_Color                    |[17P]
        @sfc@ : Sprite__Fragment_Color                    |[17P]
                                                          |[17P]
    :---------------------------------------:$_SPRITE_FC_$:[17P]
    #__SPRITES_ON_TOP__# :--------------------------------:[17P]
                                                          |[17P]
        Render the sprites on top of the tilemap with     |[17P]
        a 2nd draw call. To start off we will just        |[17P]
        render the sprites as points, and eventually      |[17P]
        we will re-factor to use a player sprite.         |[17P]
                                                          |[17P]
        But... One step at a time my friends.             |[17P]
                                                          |[17P]
    :--------------------------------:#__SPRITES_ON_TOP__#:[17P]
                                                           [---]
    @d_p2k@ : global_Data(d_) - Pixels 2,000 (2048_X_2048) [18P]
    @SID@ ::: Sprite_ID                                    [18P]
                                                           [18P]
    $_Sprite_NDC_X_$ :------------------------------------:[18P]
    $_Sprite_NDC_Y_$ :------------------------------------:[18P]
                                                          |[18P]
        @Sprite_NDC_X@ : Sprite_Normalized_Device_Coords.X|[18P]
        @Sprite_NDC_Y@ : Sprite_Normalized_Device_Coords.Y|[18P]
                                                          |[18P]
        @NDC@ : Normalized_Device_Coordinates.            |[18P]
              : NDC are in range : (-1.0 to +1.0)         |[18P]
                                                          |[18P]
    :------------------------------------:$_Sprite_NDC_Y_$:[18P]
    :------------------------------------:$_Sprite_NDC_X_$:[18P]

    #__UNIFORM_INIT__# :----------------------------------:[19P]
                                                          |[19P]
        Set intial values for all of our uniforms.        |[19P]
        They are called "uniforms" because they have      |[19P]
        a "uniform value" for every invokation of         |[19P]
        the shader for a given game frame.                |[19P]
                                                          |[19P]
    :----------------------------------:#__UNIFORM_INIT__#:[19P]
    #__UNIFORM_ADDRESSES__# :-----------------------------:[19P]
                                                          |[19P]
        Get the addresses of our uniform variables within |[19P]
        our shader objects. We can't get a real raw       |[19P]
        [ pointer / address ] so instead we get a thing   |[19P]
        called a "location" which is just OpenGL's        |[19P]
        name for an "Integer Handle".                     |[19P]
                                                          |[19P]
        @GUL@ ::::::: Get_Uniform_Location (FUNCTION_PTR) |[19P]
        @d_tik_loc@ : game ticker's (tik) location (loc)  |[19P]
                                                          |[19P]
        WARNING : WebGL And OpenGL __DIFFER__ here :      |[19P]
                                                          |[19P]
        Uniform Locations Are :                           |[19P]
                                                          |[19P]
            OPENGL : INTEGER HANDLES                      |[19P]
            WEBGL  : WebGLUniformLocation Objects         |[19P]
                                                          |[19P]
    :-----------------------------:#__UNIFORM_ADDRESSES__#:[19P]
    #__GAME_STATE_UPDATE__# :-----------------------------:[19P]
                                                          |[19P]
        Any game logic that needs to be updated will      |[19P]
        go into this "game state update" section.         |[19P]
                                                          |[19P]
        @d_tik@ : global_Data(d_) - game TIcKer(time)     |[19P]
                                                          |[19P]
        We are not going to add any new functions to      |[19P]
        this project unless ABSOLUTELY NECESSARY because  |[19P]
        fractionating the code base like that turns our   |[19P]
        code into spaghetti code and fucks with our       |[19P]
        "linear narrative".                               |[19P]
                                                          |[19P]
        Linear Narrative Reference :                      |[19P]
                                                          |[19P]
            www.youtube.com/watch?v=Nb2tebYAaOA&t=8m30s   |[19P]
                                                          |[19P]
            AT EXACTLY 8 minutes and 30 Seconds.          |[19P]
            Lex Fridman interviews Jim Keller .           |[19P]
            A micro-processor engineer.                   |[19P]
                                                          |[19P]
    :-----------------------------:#__GAME_STATE_UPDATE__#:[19P]
    #__ATOMIC_IVY_MMO_GLOBALS__# :------------------------:[20P]
                                                          |[20P]
        Global variable's who's EXACT NAME and usage      |[20P]
        appear in "ATOMIC_IVY_MMO.JS" here :              |[20P]
                                                          |[20P]
            www.github.com/KanjiCoder/AIM                 |[20P]
                                                          |[20P]
        We want to isolate these globals from other       |[20P]
        globals in order to make it easier to know        |[20P]
        what we will be taking from this "POI" project    |[20P]
        and pasting into the new "ARTEMIS" system of      |[20P]
        "Atomic Ivy MMO" once this mini-sprite-renderer   |[20P]
        project has been completed.                       |[20P]
                                                          |[20P]
    :------------------------:#__ATOMIC_IVY_MMO_GLOBALS__#:[20P]
    #__PLAYER_CONTROL__# :--------------------------------:[20P]
                                                          |[20P]
        @i_kev@ : Input(i_) - Keyboard_EVent(object)      |[20P]
          @kev@ :             Keyboard_EVent(object)      |[20P]
                                                          |[20P]
        A simple keyboard controller that can move the    |[20P]
        active player will go here. I think we will       |[20P]
        make it so that pressing "1,2,3,4,5,6,7,8,9"      |[20P]
        on the keyboard will give you control of players  |[20P]
        1-9 . Then we can put 9 sprites on screen.        |[20P]
                                                          |[20P]
        Then you can use the arrow keys to move the       |[20P]
        player's position around the tilemap.             |[20P]
                                                          |[20P]
    :--------------------------------:#__PLAYER_CONTROL__#:[20P]
    #__WIREUP_KEYBOARD__# :-------------------------------:[20P]
                                                          |[20P]
        Register the  [ PLAYER_CONTROL ]  function with   |[20P]
        a keyboard event so that the  [ PLAYER_CONTROL ]  |[20P]
        function is allways "Called Back" when keys       |[20P]
        on the keyboard are pressed by the user.          |[20P]
                                                          |[20P]
    :-------------------------------:#__WIREUP_KEYBOARD__#:[20P]
    $_CPU_PIX2048_AND_GPU_P2K_$ :-------------------------:[20P]
                                                          |[20P]
        "p2k" is "pix2048" .                              |[20P]
                                                          |[20P]
        CPU_SIDE_TEXTURE_NAME === "pix2048" ( bitmap  )   |[20P]
        GPU_SIDE_TEXTURE_NAME === "p2k"     ( sampler )   |[20P]
                                                          |[20P]
        One of the few uniforms in my engine that break   |[20P]
        the rules of "same name on CPU as GPU".           |[20P]
                                                          |[20P]
        @d_pix2048@ : A 2048_X_2048 bitmap that stores    |[20P]
          @pix2048@ : all the memory for entire game.     |[20P]
                                                          |[20P]
            @d_p2k@ : A texture sampler for the GPU       |[20P]
              @p2k@ : side texture version of             |[20P]
                    : [ d_pix2048 ].                      |[20P]
                                                          |[20P]
    :-------------------------:$_CPU_PIX2048_AND_GPU_P2K_$:[20P]
                                                           [---]
    #__INIT_CPU_TEXTURE__# :------------------------------:[21P]
                                                          |[21P]
        Initialize the CPU-side texture that is used for  |[21P]
        the game's master memory. A small sub-chunk of    |[21P]
        these pixels will be decidated to sprite          |[21P]
        information.                                      |[21P]
                                                          |[21P]
        The main game ( ATOMIC_IVY_MMO.JS ) is designed   |[21P]
        to have a maximum of 64 sprites. These sprites    |[21P]
        can be NPC or PLAYER sprites. But the total       |[21P]
        cannot go over 64. So for example :               |[21P]
                                                          |[21P]
        You could have :                                  |[21P]
                                                          |[21P]
            1.  64 Players , 00 NPCS ( 64 Total Sprites ) |[21P]
            2.  00 Players , 64 NPCS ( 64 Total Sprites ) |[21P]
            3.  32 Players , 32 NPCS ( 64 Total Sprites ) |[21P]
                                                          |[21P]
        Or any balancing between ( 1.) and ( 2.) in       |[21P]
        the examples given above.                         |[21P]
                                                          |[21P]
        We are going to fill this CPU-side bitmap with    |[21P]
        bogus data for now. We don't really care what     |[21P]
        is in it at the moment, but we would like         |[21P]
        adjacent pixels and bytes to store something      |[21P]
        different so that hopefully when our sprites      |[21P]
        are reading their respective chunks of bogus      |[21P]
        intialized data, they will all do something       |[21P]
        visually different that the other.                |[21P]
                                                          |[21P]
    :------------------------------:#__INIT_CPU_TEXTURE__#:[21P]

    #__ALLOC_GPU_TEXTURE__# :-----------------------------:[22P]
                                                          |[22P]
        Allocate(ALLOC) the GPU-side texture memory.      |[22P]
        This GPU-side memory is going to be a direct      |[22P]
        analog to the CPU-side[ d_pix2048 ]bitmap.        |[22P]
                                                          |[22P]
        It is an UN-signed 32-bit integer texture         |[22P]
        with 8-bits per color channel. The bytes          |[22P]
        stored in order[ R,G,B,A ]for                     |[22P]
        [ RED,GREEN,BLUE,ALPHA] respectively.             |[22P]
                                                          |[22P]
        THAT_EXACT_FUCKING_ORDER!!                        |[22P]
                                                          |[22P]
        Unsigned integer textures are only supported      |[22P]
        in WebGL2 , so if you __DONT__ have a webgl2      |[22P]
        context, this code __WILL_NOT_WORK__ !            |[22P]
                                                          |[22P]
        $_T_O_T_$ : Type_Of_Texture , In webgl            |[22P]
                  : this is known as "Texture Target"     |[22P]
                                                          |[22P]
        $_T_HAN_$ : Texture_HANdle , in webgl this is     |[22P]
                  : a[ WebGLTexture ]object.              |[22P]
                  :                                       |[22P]
                  : If this were OPENGL ,                 |[22P]
                  : we would use                          |[22P]
                  : [ glGenTextures ]instead of           |[22P]
                  : [ d_wgl.createTexture ]and get        |[22P]
                  : back an integer handle instead        |[22P]
                  : of an object.                         |[22P]
                                                          |[22P]
        $_L_O_D_$ : Level_Of_Detail , a zero here         |[22P]
                  : means "mip map level 0" which         |[22P]
                  : means "full resolution texture".      |[22P]
                                                          |[22P]
                                                          |[22P]
        $_C_FMT_$ :---------------------------------:     |[22P]
                                                    |     |[22P]
            @C_FMT@ : CPU-side FORMAT of PIXEL_DATA.|     |[22P]
                                                    |     |[22P]
        :---------------------------------: $_C_FMT_$     |[22P]
        $_G_FMT_$ :---------------------------------:     |[22P]
                                                    |     |[22P]
            YES!!! TWO INPUTS ARE TAGGED WITH THIS  |     |[22P]
                   BECAUSE COLLECTIVELY THEY MAKE   |     |[22P]
                   UP THE[ GPU_FORMAT ]!!!!!!!!!!!  |     |[22P]
                                                    |     |[22P]
            @G_FMT@ : GPU-side FORMAT of PIXEL_DATA.|     |[22P]
                                                    |     |[22P]
                    : Technically on GPU it is      |     |[22P]
                    : called "Texel Data".          |     |[22P]
                                                    |     |[22P]
        :---------------------------------: $_G_FMT_$     |[22P]
        [ T_I_2_D ] :-------------------------------:     |[22P]
                                                    |     |[22P]
            Just marking the scope of the           |     |[22P]
            [ texImage2D ]call, because it is       |     |[22P]
            a pretty verbose call with a lot of     |     |[22P]
            [ actual arguments ]to keep track of.   |     |[22P]
                                                    |     |[22P]
            Formal_Params : Part of func prototype  |     |[22P]
            Actual_Args   : Actual data passed in   |     |[22P]
                                                    |     |[22P]
        :-------------------------------:[ T_I_2_D ]:     |[22P]
                                                          |[22P]
    :-----------------------------:#__ALLOC_GPU_TEXTURE__#:[22P]
    #__ATOMIC_IVY_MMO_CONSTANTS__# :----------------------:[23P]
                                                          |[23P]
        Constants in this section should have identical   |[23P]
        names to their counterparts in my main            |[23P]
        __OPEN_SOURCE_MMO_CODE_BASE__ known as            |[23P]
        "Atomic Ivy MMO". ( @AIM@ : Atomic_Ivy_MMO )      |[23P]
                                                          |[23P]
        www.github.com/KanjiCoder/AIM                     |[23P]
                                                          |[23P]
        Though these are constants, we are declaring      |[23P]
        them with the "let" keyword to keep this          |[23P]
        code base simple. They are constant on the        |[23P]
        honor's system. Don't change them.                |[23P]
                                                          |[23P]
    :----------------------:#__ATOMIC_IVY_MMO_CONSTANTS__#:[23P]
    ?_NICE_GIF_YOU_GOT_THERE_? :--------------------------:[23P]
                                                          :[23P]
        The animated gif featured in my youtube           :[23P]
        short tutorial video( [POI_023] )                 :[23P]
        is here[     imgur.com/a/usjiEW7 ]IMGUR_URL       :[23P]
        TINYURL[ www.tinyurl.com/AIM-GIF ]TINY__URL       :[23P]
                                                          :[23P]
    :--------------------------:?_NICE_GIF_YOU_GOT_THERE_?:[23P]
    
    #_TEX_UNI_IND_P2K_# :---------------------------------:[24P]
                                                          |[24P]
        @TEX_UNI_IND_P2K@ : Texture Unit Index Of - d_p2k |[24P]
                                                          |[24P]
        We use this index to do TWO THINGS :              |[24P]
                                                          |[24P]
        1. Correctly setup our texture to correct T_S_I   |[24P]
        2. Correctly setup our sampler to correct T_U_I   |[24P]
                                                          |[24P]
        @T_U_I@ : Texture_Unit_Index ( Local  Index )     |[24P]
        @T_S_I@ : Texture_Slot_Index ( Global Index )     |[24P]
                                                          |[24P]
        Fairly certain the sampler needs to use the       |[24P]
        [ local_index ]( T_U_I )while texture uploading   |[24P]
        needs to use the[ global_index ] ( T_S_I ).       |[24P]
                                                          |[24P]
                                                          |[24P]
    :---------------------------------:#_TEX_UNI_IND_P2K_#:[24P]
    #_ACTIVATE_B4_BIND_# :--------------------------------:[24P]
                                                          |[24P]
        @ACTIVATE_B4_BIND@ : Activate Before Bind         |[24P]
                                                          |[24P]
        If we want our uploaded bitmap( d_pix2048 )       |[24P]
        to have settings that agree with the uploaded     |[24P]
        bitmap's sampler ( d_p2k ) , then we need         |[24P]
        to make sure the below things are equal :         |[24P]
                                                          |[24P]
        1. d_pix2048's active texture unit upon           |[24P]
           upload should be equal to integer value        |[24P]
           uploaded to[ d_p2k ]texture sampler.           |[24P]
                                                          |[24P]
        2. d_2pk 's texture sampler should be loaded      |[24P]
           with the same relative "texture_unit_index"    |[24P]
           that was in focus when we upload[ d_pix2048 ]. |[24P]
                                                          |[24P]
        A texture sampler is just an integer uniform.     |[24P]
        That is all it is. If you are used to             |[24P]
        Object_Oriented_Programming( OOP ), that might    |[24P]
        feel kind of weird.                               |[24P]
                                                          |[24P]
        But think about it... Our texture sampler only    |[24P]
        has ONE_PIECE_OF_INFORMATION_IT_NEEDS_CONFIGURED  |[24P]
        and that is the "texture_unit_to_sample_from"...  |[24P]
                                                          |[24P]
        So... why would you create an object that only    |[24P]
        has one member variable, which is a number...     |[24P]
        Rather than just... I don't know...               |[24P]
                                                          |[24P]
        USE_A_FUCKING_NUMBER ?                            |[24P]
                                                          |[24P]
        OpenGL / WebGL uses a number in this case.        |[24P]
                                                          |[24P]
        Be a gigachad. Be like WebGL and OpenGL.          |[24P]
                                                          |[24P]
    :--------------------------------:#_ACTIVATE_B4_BIND_#:[24P]
    #__WIRE_UP_SAMPLER__# :-------------------------------:[24P]
                                                          |[24P]
        Set the integer value of "d_p2k" texture          |[24P]
        sampler within our sprite renderer's vertex       |[24P]
        shader by giving command :                        |[24P]
                                                          |[24P]
             d_wgl.uniform1i                              |[24P]
                                                          |[24P]
        Two pieces of information :                       |[24P]
                                                          |[24P]
            1. Address of "d_p2k" in shader (d_p2k_loc)   |[24P]
            2. Value to store in "d_2pk" :  (d_tui_p2k)   |[24P]
                                                          |[24P]
    :-------------------------------:#__WIRE_UP_SAMPLER__#:[24P]

    $_COL_SPRITE_$ :--------------------------------------:[25P]
                                                          |[25P]
        SID  SID  SID  SID  ( Sprite ID Controls Column ) |[25P]
         V    V    V    V   ( Each Sprite's Data Is     ) |[25P]
        [0]  [1]  [2]  [3]  ( Encoded Into a COLUMN ,   ) |[25P]
        [ ]  [ ]  [ ]  [ ]  ( not a row.                ) |[25P]
        [ ]  [ ]  [ ]  [ ]                                |[25P]
        [ ]  [ ]  [ ]  [ ]                                |[25P]
        [ ]  [ ]  [ ]  [ ]                                |[25P]
        [ ]  [ ]  [ ]  [ ]                                |[25P]
                                                          |[25P]
    :--------------------------------------:$_COL_SPRITE_$:[25P]
    $_ROW_ATTRIB_$ :--------------------------------------:[25P]
                                                          |[25P]
         +--+--+--+----- Row Controls Sprite_ID( SID )    |[25P]
         |  |  |  |                                       |[25P]
         V  V  V  V                                       |[25P]
        [ ][ ][ ][ ] <-- Attribute #1 of ALL_SPRITES      |[25P]
                                                          |[25P]
        [ ][ ][ ][ ] <-- Attribute #2 of ALL_SPRITES      |[25P]
                                                          |[25P]
        [ ][ ][ ][ ] <-- Attribute #3 of ALL_SPRITES      |[25P]
                                                          |[25P]
        [ ][ ][ ][ ] <-- Attribute #4 of ALL_SPRITES      |[25P]
                                                          |[25P]
    :--------------------------------------:$_ROW_ATTRIB_$:[25P]

    #__CONSTANTS__# :-------------------------------------:[26P]
                                                          |[26P]
        Constants section for constants that are          |[26P]
        __UNIQUE__ to this __POI__ side project.          |[26P]
                                                          |[26P]
        If the constant also appears in the main          |[26P]
        "ATOMIC_IVY_MMO.JS" source file of our main       |[26P]
        game engine project, the constant belongs in      |[26P]
        the other constant section:                       |[26P]
                                                          |[26P]
                       CONSTANTS : Only exist in POI_###.HTM [_]
        ATOMIC_IVY_MMO_CONSTANTS : Exist in main game engine [_]
                                                          |[26P]
    :-------------------------------------:#__CONSTANTS__#:[26P]
    #__HACK_CPU_TEXTURE__# :------------------------------:[26P]
                                                          |[26P]
        Something is wrong with our texture sampling or   |[26P]
        our texture upload, we need to :                  |[26P]
                                                          |[26P]
            ISOLATE_THE_PROBLEM                           |[26P]
                                                          |[26P]
        If changing every single byte of our texture      |[26P]
        results in the sprites moving from the LEFT_SIDE  |[26P]
        to the RIGHT_SIDE of the screen, then we know     |[26P]
        that we might just for some reason have a         |[26P]
        BIG_CO_INCIDENCE on our hands and everything      |[26P]
        is O_K_A_Y .                                      |[26P]
                                                          |[26P]
        But if that doesn't happen, we need to go         |[26P]
        __BUG_HUNTING__ .                                 |[26P]
                                                          |[26P]
    :------------------------------:#__HACK_CPU_TEXTURE__#:[26P]
    $_BAD_MAX_DEX_$ :-------------------------------------:[26P]
                                                          |[26P]
        We failed to correctly calculate the maximum      |[26P]
        valid byte index for the bitmap we are trying     |[26P]
        to populate with nothing but "0xFF" (255) bytes.  |[26P]
                                                          |[26P]
    :-------------------------------------:$_BAD_MAX_DEX_$:[26P]
    #__UNIFORM_ADDR_CHK__#:[27P]:-------------------------:[27P]
                                                          |[27P]
        WEBGL : Uniform Handle Is A  FUCKING OBJECT.      |[27P]
        OPENGL: Uniform Handle Is An INTEGER.             |[27P]
                                                          |[27P]
        The reason I have that logging message in         |[27P]
        addition to error checks is just a sanity check.  |[27P]
        I don't feel comfortable with a direct check      |[27P]
        against "null". But that's what we have to do     |[27P]
        in WebGL.                                         |[27P]
                                                          |[27P]
    -------------------------:#__UNIFORM_ADDR_CHK__#:[27P]:[27P]
    #__PARAM_AND_STORE__# :-------------------------------:[27P]
                                                          |[27P]
        @PARAM_AND_STORE@ : Parameters And Storage        |[27P]
                                                          |[27P]
        I am 99% certain that our texture upload is       |[27P]
        now working properly and that the current         |[27P]
        problem we have now is with either our :          |[27P]
                                                          |[27P]
            1. Texel Fetch                                |[27P]
            2. Texel Fetch Bitpacking In Vertex Shader    |[27P]
            3. Texel Fetch Formula To Get NDC.XY Coords   |[27P]
                                                          |[27P]
        @NDC@ : Normalized_Device_Coordinates             |[27P]
                                                          |[27P]
    :-------------------------------:#__PARAM_AND_STORE__#:[27P]

    #__NPC_RENDERER_VERT__# :-----------------------------:[28P]
                                                          |[28P]
        The "NPC Renderer"(*S) vertex shader code.        |[28P]
        THe "NPC Renderer" is also the "PC Renderer".     |[28P]
                                                          |[28P]
        ONE_SHADER_TO_RENDER_ALL_THE_CHARACTERS           |[28P]
        ONE_SHADER_TO_RENDER_ALL_THE_SPRITES              |[28P]
        ONE_SHADER_TO_RENDER_ALL_THE_PLAYERS              |[28P]
        ( Playable and non-playable characters )          |[28P]
        ( Playable and non-playable sprites    )          |[28P]
        ( Playable and non-playable players    )          |[28P]
                                                          |[28P]
    :-----------------------------:#__NPC_RENDERER_VERT__#:[28P]
    #__NPC_RENDERER_FRAG__# :-----------------------------:[28P]
                                                          |[28P]
        The "NPC Renderer"(*S) fragment shader code.      |[28P]
        THe "NPC Renderer" is also the "PC Renderer".     |[28P]
                                                          |[28P]
        ONE_SHADER_TO_RENDER_ALL_THE_CHARACTERS           |[28P]
        ONE_SHADER_TO_RENDER_ALL_THE_SPRITES              |[28P]
        ONE_SHADER_TO_RENDER_ALL_THE_PLAYERS              |[28P]
        ( Playable and non-playable characters )          |[28P]
        ( Playable and non-playable sprites    )          |[28P]
        ( Playable and non-playable players    )          |[28P]
                                                          |[28P]
    :-----------------------------:#__NPC_RENDERER_FRAG__#:[28P]

    #_MARIONETTE_# :--------------------------------------:[29P]
                                                          |[29P]
        @d_marione@ : The active player being controlled  |[29P]
                    : by the[ human-player / client ].    |[29P]
                    : Called "marione" for "marionette".  |[29P]
                                                          |[29P]
        I guess "marione" is an anime character from a    |[29P]
        anime called "hunter-x-hunter". Good enough for   |[29P]
        me, we will use this name in code to refere       |[29P]
        to the client-side-player-index in control        |[29P]
        by the player.                                    |[29P]
                                                          |[29P]
    :--------------------------------------:#_MARIONETTE_#:[29P]
    $_OFFSETRAWX_$ :--------------------------------------:[29P]
    $_OFFSETRAWY_$ :--------------------------------------:[29P]
                                                          |[29P]
        @d_orx@ : Offset_Raw_X ( scalar __NOT__ applied ) |[29P]
        @d_ory@ : Offset_Raw_Y ( scalar __NOT__ applied ) |[29P]
                                                          |[29P]
        The raw offset to move the selected player        |[29P]
        this frame of game. The selected player is        |[29P]
        known as the "Marionette" aka "MARIONE"           |[29P]
        in our code.                                      |[29P]
                                                          |[29P]
        It is the player currently under control          |[29P]
        of the human using the client instance of         |[29P]
        our MMO game engine.                              |[29P]
                                                          |[29P]
        The "MARIONE" is __NEVER__ an __NPC__   .         |[29P]
        THe "MARIONE" is __ALWAYS__ a __HUMAN__ .         |[29P]
                                                          |[29P]
    :--------------------------------------:$_OFFSETRAWY_$:[29P]
    :--------------------------------------:$_OFFSETRAWX_$:[29P]
    #__CHOOSE_PLAYER__# :---------------------------------:[29P]
                                                          |[29P]
        Use the number keys on querty keypad to select    |[29P]
        which player the [ human ]should control. The     |[29P]
        player that the human controls is known as        |[29P]
        the[ MARIONETTE / MARIONE ].                      |[29P]
                                                          |[29P]
    :---------------------------------:#__CHOOSE_PLAYER__#:[29P]
    #__PLAYER_OFFSET_RAW__# :-----------------------------:[29P]
                                                          |[29P]
        Calculate the __RAW__ offset to apply to the      |[29P]
        active player ( MARIONE / MARIONETTE ) this       |[29P]
        frame of the game.                                |[29P]
                                                          |[29P]
        This value will be scaled to something that       |[29P]
        will be noticable. I don't know what that         |[29P]
        scalar will be yet.                               |[29P]
                                                          |[29P]
    :-----------------------------:#__PLAYER_OFFSET_RAW__#:[29P]
    $_BYTE_EXTRACTION_LOGIC_$ :---------------------------:[30P]
    ?_ANOTHER_WAY_TO_SHIFT_? :----------------------------:[30P]
                                                          |[30P]
        How I am extracting bytes in this tutorial :      |[30P]
                                                          |[30P]
        s_m[ dpc + 0 ]=(sav & 0xFF000000) >>> 24 ;        |[30P]
        s_m[ dpc + 1 ]=(sav & 0x00FF0000) >>> 16 ;        |[30P]
        s_m[ dpc + 2 ]=(sav & 0x0000FF00) >>>  8 ;        |[30P]
        s_m[ dpc + 3 ]=(sav & 0x000000FF) >>>  0 ;        |[30P]
                                                          |[30P]
        Another way you might see it done :               |[30P]
                                                          |[30P]
        s_m[ dpc + 0 ]=((sav >>> 24) & 0xFF )>>>0;        |[30P]
        s_m[ dpc + 1 ]=((sav >>> 16) & 0xFF )>>>0;        |[30P]
        s_m[ dpc + 2 ]=((sav >>>  8) & 0xFF )>>>0;        |[30P]
        s_m[ dpc + 3 ]=((sav >>>  0) & 0xFF )>>>0;        |[30P]
                                                          |[30P]
    :----------------------------:?_ANOTHER_WAY_TO_SHIFT_?:[30P]
    :---------------------------:$_BYTE_EXTRACTION_LOGIC_$:[30P]
    #_CPU_UPDATE_PLAYER_# :-------------------------------:[30P]
                                                          |[30P]
        Update of the player on the CPU-SIDE .            |[30P]
                                                          |[30P]
        The flow of information is 1-way here.            |[30P]
        We modify CPU-side memory and then push           |[30P]
        the modifications up to the GPU to sync           |[30P]
        the changes.                                      |[30P]
                                                          |[30P]
        In the next video( PROBABLY_NEXT ) , we will      |[30P]
        upload the CPU-side bitmap changes to the         |[30P]
        corresponding texture memory.                     |[30P]
                                                          |[30P]
    :-------------------------------:#_CPU_UPDATE_PLAYER_#:[30P]

    #_GPU_UPDATE_PLAYER_# :-------------------------------:[31P]
                                                          |[31P]
        Update the player on GPU side by updating the     |[31P]
        512_X_512 block of pixel memory corresponding     |[31P]
        to the[ centeral_level_pack ].                    |[31P]
                                                          |[31P]
        __YES__ this is a __WASTEFUL__ operation where    |[31P]
        we are pushing up __MORE__THAN__WE__NEED_TOO__.   |[31P]
                                                          |[31P]
        __HOWEVER__ , this sprite renderer is a prototype |[31P]
        for the "ARTEMIS" system of "ATOMIC_IVY_MMO.JS"   |[31P]
                                                          |[31P]
    :-------------------------------:#_GPU_UPDATE_PLAYER_#:[31P]
    [ S_T_P_M_B ] :---------------------------------------:[31P]
                                                          |[31P]
        @S_T_P_M_B@ : Sub Texture Push My Bitches         |[31P]
        @STPMB@ ::::: Sub Texture Push My Bitches         |[31P]
                                                          |[31P]
        Just labelling scope of function call.            |[31P]
                                                          |[31P]
    :---------------------------------------:[ S_T_P_M_B ]:[31P]
    $_CLP_ORG_$ :-----------------------------------------:[31P]
                                                          |[31P]
        @CLP_ORG@ : Centeral_Level_Pack - ORIGIN          |[31P]
                                                          |[31P]
    :-----------------------------------------:$_CLP_ORG_$:[31P]
    $_CLP_MAG_$ :-----------------------------------------:[31P]
                                                          |[31P]
        @CLP_MAG@ : Centeral_Level_Pack - MAGNITUDE       |[31P]
                                                          |[31P]
    :-----------------------------------------:$_CLP_MAG_$:[31P]
    $_SRC_FMT_$ :-----------------------------------------:[31P]
    $_SRC_TYP_$ :-----------------------------------------:[31P]
                                                          |[31P]
        @SRC_FMT@ : Source Format                         |[31P]
        @SRC_TYP@ : Source Type                           |[31P]
                                                          |[31P]
        Together, these two inputs make up what I call    |[31P]
        the "GPU_FORMAT" / "GPU_FMT". Is that correct     |[31P]
        to say ? I don't know , but the mental model      |[31P]
        seems to be accurate enough for my needs.         |[31P]
                                                          |[31P]
    :-----------------------------------------:$_SRC_TYP_$:[31P]
    :-----------------------------------------:$_SRC_FMT_$:[31P]
    $_CENTER_LEVPACK_X_$ :--------------------------------:[31P]
    $_CENTER_LEVPACK_Y_$ :--------------------------------:[31P]
    $_CENTER_LEVPACK_W_$ :--------------------------------:[31P]
    $_CENTER_LEVPACK_H_$ :--------------------------------:[31P] 
                                                          |[31P]
        @CENTER_LEVPACK_X@ : Centeral Levelpack TopLeft.X |[31P]
        @CENTER_LEVPACK_Y@ : Centeral Levelpack TopLeft.Y |[31P]
                                                          |[31P]
        @CENTER_LEVPACK_W@ : Centeral Levelpack WID_IN_PIX|[31P]
        @CENTER_LEVPACK_H@ : Centeral Levelpack HIG_IN_PIX|[31P]
                                                          |[31P]
        @WID_IN_PIX@ : Width  In Pixels                   |[31P]
        @HIG_IN_PIX@ : Height In Pixels                   |[31P]
                                                          |[31P]
        +--------+ +--------+ +--------+ +--------+ --=-- |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        +--------+ +--------+ +--------+ +--------+   |   |[31P]
        +--------+ +--------+ +--------+ +--------+   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | | CENLEV | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        +--------+ +--------+ +--------+ +--------+2048_PX|[31P]
        +--------+ +--------+ +--------+ +--------+   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        +--------+ +--------+ +--------+ +--------+   |   |[31P]
        +--------+ +--------+ +--------+ +--------+   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        |        | |        | |        | |        |   |   |[31P]
        +--------+ +--------+ +--------+ +--------+ --=-- |[31P]
        :                                         :       |[31P]
        |<-------------- 2048_PX ---------------->|       |[31P]
                                                          |[31P]
        The "Centeral Level Pack" ( CENLEV In Diagram )   |[31P]
        is a 512_X_512 block of memory storing the        |[31P]
        centeral levelpack within our 3_X_3 grid of       |[31P]
        levelpacks in ATOMIC_IVY_MMO.JS(*S) renderable    |[31P]
        space.                                            |[31P]
                                                          |[31P]
        When updating sprite postions, we just push       |[31P]
        __ALL_OF_THIS_MEMORY__ rather than worrying       |[31P]
        about the particulars of what has and has         |[31P]
        not changed.                                      |[31P]
                                                          |[31P]
        The reason being that all the computations        |[31P]
        for figuring out exactly what to push ,           |[31P]
        and all of the multiple[ sub_tex_pushes ]         |[31P]
        that would be used... Is __LESS_EFFICIENT__       |[31P]
        than just pushing the __WHOLE_GOD_DAMNED_THING__. |[31P]
                                                          |[31P]
    :--------------------------------:$_CENTER_LEVPACK_H_$:[31P]
    :--------------------------------:$_CENTER_LEVPACK_W_$:[31P]
    :--------------------------------:$_CENTER_LEVPACK_Y_$:[31P]
    :--------------------------------:$_CENTER_LEVPACK_X_$:[31P]

    $_BEL_LOGIC_DOUBLE_CHEK_$ :---------------------------:[33P]
                                                          |[33P]
        @BEL_LOGIC_DOUBLE_CHEK@ :                         |[33P]
                                                          |[33P]
            ByteExtraction Logic Double CHEcK.            |[33P]
                                                          |[33P]
        I commented out one method of bit shifting for    |[33P]
        another and have confirmed __BOTH__ of these      |[33P]
        methods get the __SAME_RESULT__ :                 |[33P]
                                                          |[33P]
        Method 1 :                                        |[33P]
                                                          |[33P]
            s_m[ dpc + 0 ]=(sav & 0xFF000000)>>>24 ;      |[33P]
            s_m[ dpc + 1 ]=(sav & 0x00FF0000)>>>16 ;      |[33P]
            s_m[ dpc + 2 ]=(sav & 0x0000FF00)>>> 8 ;      |[33P]
            s_m[ dpc + 3 ]=(sav & 0x000000FF)>>> 0 ;      |[33P]
                                                          |[33P]
        Method 2 :                                        |[33P]
                                                          |[33P]
            s_m[ dpc + 0 ]=((sav>>>24)&(0xFF))>>>0 ;      |[33P]
            s_m[ dpc + 1 ]=((sav>>>16)&(0xFF))>>>0 ;      |[33P]
            s_m[ dpc + 2 ]=((sav>>> 8)&(0xFF))>>>0 ;      |[33P]
            s_m[ dpc + 3 ]=((sav>>> 0)&(0xFF))>>>0 ;      |[33P]
                                                          |[33P]
    :---------------------------:$_BEL_LOGIC_DOUBLE_CHEK_$:[33P]

    $_MOVE_FASTER_X_$ :-----------------------------------:[34P]
    $_MOVE_FASTER_Y_$ :-----------------------------------:[34P]
                                                          :[34P]
        @MOVE_FASTER_X@ : Move faster on X by scaling.    :[34P]
        @MOVE_FASTER_Y@ : Move faster on Y by scaling.    :[34P]
                                                          :[34P]
        We need a movement speed that is decently         :[34P]
        noticable in our test be project. Note that       :[34P]
        eventually we will want to move our character     :[34P]
        using :                                           :[34P]
                                                          :[34P]
            "velocity" "drag" "acceleration" "gravity"... :[34P]
                                                          :[34P]
        But that is polish for a later day.               :[34P]
                                                          :[34P]
    :-----------------------------------:$_MOVE_FASTER_Y_$:[34P]
    :-----------------------------------:$_MOVE_FASTER_X_$:[34P]

    #_SPRITE_ATTRIBUTE_INDEXES_# :------------------------:[35P]
                                                          |[35P]
        +---------------------------------------+         |[35P]
        |                                       |         |[35P]
        |   Because of space warping that will  |         |[35P]
        |   be done in our main game engine ,   |         |[35P]
        |   we actually need to store the       |         |[35P]
        |   sprite positions natively as 4D     |         |[35P]
        |   addresses . A 2D tile coord and a   |         |[35P]
        |   2D tile internal coordinate.        |         |[35P]
        |                                       |         |[35P]
        |   I call it :                         |         |[35P]
        |       Hellraizer Space Warping        |         |[35P]
        |   or..Hellraiser Space Compression    |         |[35P]
        |                                       |         |[35P]
        |   Whatever, i was inspired by the     |         |[35P]
        |   netflix hellraiser and how they     |         |[35P]
        |   depict the 4TH dimension to make    |         |[35P]
        |   hallways come out of nowhere.       |         |[35P]
        |                                       |         |[35P]
        +---------------------------------------+         |[35P]
                                                          |[35P]
        @S__A__I@ : Sprite_Attribute_Index                |[35P]
        @SAI@ ::::: Sprite_Attribute_Index                |[35P]
                                                          |[35P]
        $_SAI_GTX_$ : S__A__I . Global_Tile_X             |[35P]
        $_SAI_GTY_$ : S__A__I . Global_Tile_Y             |[35P]
                                                          |[35P]
        $_SAI_DIX_$ : S__A__I . Discrete_Internal_X       |[35P]
        $_SAI_DIY_$ : S__A__I . Discrete_Internal_Y       |[35P]
                                                          |[35P]
        $_SAI_VEL_$ : S__A__I . Velocity                  |[35P]
        $_SAI_ACC_$ : S__A__I . Acceleration              |[35P]
        $_SAI_DRA_$ : S__A__I . Drag                      |[35P]
                                                          |[35P]
        $_SAI_CX0_$ : S__A__I . Camera_bounds.X0 ( @LLC@ )|[35P]
        $_SAI_CX1_$ : S__A__I . Camera_bounds.X1 ( @LLC@ )|[35P]
        $_SAI_CY0_$ : S__A__I . Camera_bounds.Y0 ( @LLC@ )|[35P]
        $_SAI_CY1_$ : S__A__I . Camera_bounds.Y1 ( @LLC@ )|[35P]
                                                          |[35P]
        $_SAI_HCX_$ : S__A__I . Hell_Compression.__X__    |[35P]
        $_SAI_HCY_$ : S__A__I . Hell_Compression.__Y__    |[35P]
                                                          |[35P]
                                                          |[35P]
        @_L_L_C_@ : Low_Level_Camera                      |[35P]
         @L_L_C@  : Low_Level_Camera                      |[35P]
         @LLC@    : Low_Level_Camera                      |[35P]
                                                          |[35P]
        TAG[ JUST_LIKE_THE_MARIONETTE ]                   |[35P]
                                                          |[35P]
        @marione@   : Opposite of an NPC (playble char)   |[35P]
        @npc@       : NON-Playable Character              |[35P]
        @player@    : GENERIC[ npc || marione ]           |[35P]
        @character@ : GENERIC[ npc || marione ]           |[35P]
                                                          |[35P]
                                                          |[35P]
    :------------------------:#_SPRITE_ATTRIBUTE_INDEXES_#:[35P]

    #_F32_SSS_# :-----------------------------------------:[36P]
                                                          |[36P]
        In[ Atomic_Ivy_MMO.JS ]this variable is known as :|[36P]
                                                          |[36P]
            [ f32_sss ]( Float32 SpriteScreenSize )       |[36P]
                                                          |[36P]
        In this test bed project this variable is :       |[36P]
                                                          |[36P]
            [ fss ]( Float32_Sprite_Size )                |[36P]
                                                          |[36P]
        The reason is that space is more limited in this  |[36P]
        [ test_bed ]project .                             |[36P]
                                                          |[36P]
    :-----------------------------------------:#_F32_SSS_#:[36P]

    $_D_VPC_$ :-------------------------------------------:[37P]
    $_D_VP0_$ :-------------------------------------------:[37P]
    $_D_VP1_$ :-------------------------------------------:[37P]
                                                          |[37P]
        TAG[ LOW_LEVEL_CAMERA_RECTANGLES    ]             |[37P]
        TAG[ LOW_LEVEL_SELECTION_RECTANGLES ]             |[37P]
                                                          |[37P]
        @d_vpc@ : global_Data - View_Port____Canvas       |[37P]
        @d_vp0@ : global_Data - View_Port____0 ( DESTIN ) |[37P]
        @d_vp1@ : global_Data - View_Port____1 ( SOURCE ) |[37P]
                                                          |[37P]
        @DESTIN@ : Destination , we read data from        |[37P]
                 : [ SOURCE ]and use it to render pixel   |[37P]
                 : [ ON/SCREEN ], the screen is the       |[37P]
                 : destination.                           |[37P]
                                                          |[37P]
        NOTE : [ vpc ]AND[ vp0 ]are in the exact same ::::|[37P]
             : coordinate space. [ vp0 ]is a SUBSET   ::::|[37P]
             : of[ vpc ]coords. We have these __TWO__ ::::|[37P]
             : viewports so that we can implement     ::::|[37P]
             : [ letter_boxing ]of our rendering .    ::::|[37P]
                                                          |[37P]
    :-------------------------------------------:$_D_VP1_$:[37P]
    :-------------------------------------------:$_D_VP0_$:[37P]
    :-------------------------------------------:$_D_VPC_$:[37P]
    $_TILEMAP_VPC_$ :-------------------------------------:[37P]
    $_TILEMAP_VP0_$ :-------------------------------------:[37P]
    $_TILEMAP_VP1_$ :-------------------------------------:[37P]
                                                          |[37P]
        @TILEMAP_VPC@ : Tilemap shader(*S) [ d_vpc ]var.  |[37P]
        @TILEMAP_VP0@ : Tilemap shader(*S) [ d_vp0 ]var.  |[37P]
        @TILEMAP_VP1@ : Tilemap shader(*S) [ d_vp1 ]var.  |[37P]
                                                          |[37P]
        We have 2 shader passes , so it is likely that    |[37P]
        we are going to need to have the same uniform     |[37P]
        names in more than one shader. That is going to   |[37P]
        make things tricky, because we have to do         |[37P]
        [ TWO_UNIFORM_PUSHES ]PER[ UNIFORM ].             |[37P]
                                                          |[37P]
        ( assuming uniform is needed in both the )        |[37P]
        ( [ tile_map_shader ]and the ___________ )        |[37P]
        ( [ point_sprite_shader ] ______________ )        |[37P]
                                                          |[37P]
    :-------------------------------------:$_TILEMAP_VP1_$:[37P]
    :-------------------------------------:$_TILEMAP_VP0_$:[37P]
    :-------------------------------------:$_TILEMAP_VPC_$:[37P]
    $_OCD_UV4_$ :-----------------------------------------:[37P]
                                                          |[37P]
        @OCD_UV4@ : ObsessiveCompulsiveDisorder_UV4       |[37P]
            @UV4@ : Uint_Vec_4 , vector of 4 uint32(s).   |[37P]
                                                          |[37P]
        Our camera rectangles are of this type when       |[37P]
        on the[ GPU_SHADER_SIDE ].                        |[37P]
                                                          |[37P]
    :-----------------------------------------: $_OCD_UV4_$[37P]

    #_TILE_DISCRETE_UNITS_# :-----------------------------:[38P]
                                                          |[38P]
        Constants telling us how many discrete units are  |[38P]
        in different tile sizes. The main game engine     |[38P]
        uses[ power_of_2_tile_sizes ], so this prototype  |[38P]
        will aslo use the same[ power_of_2_tile_sizes ]   |[38P]
        in order to be maximally compatible with my       |[38P]
        main game engine code.                            |[38P]
                                                          |[38P]
    :-----------------------------:#_TILE_DISCRETE_UNITS_#:[38P]

    #_CAMERA_ARRAY_MEMBER_INDEXES_# :---------------------:[39P]
                                                          |[39P]
        Our camera objects are just arrays of 4 Uint32(s).|[39P]
        So in order to "read the member variables" of     |[39P]
        our camera, we need "symbolic constants" for      |[39P]
        the 4 member variables of our camera rectangle.   |[39P]
                                                          |[39P]
        @x_0@ : X_axis_Minimum( 0 === MIN ) , CAM_LEF     |[39P]
              : @CAM_LEF@ : Camera   Left Inclusive Edge  |[39P]
                                                          |[39P]
        @x_1@ : X_axis_Minimum( 1 === MAX ) , CAM_RIG     |[39P]
              : @CAM_RIG@ : Camera  Right Inclusive Edge  |[39P]
                                                          |[39P]
        @y_0@ : Y_axis_Minimum( 0 === MIN ) , CAM_TOP     |[39P]
              : @CAM_TOP@ : Camera    Top Inclusive Edge  |[39P]
                                                          |[39P]
        @y_1@ : Y_axis_Minimum( 1 === MAX ) , CAM_BOT     |[39P]
              : @CAM_BOT@ : Camera Bottom Inclusive Edge  |[39P]
                                                          |[39P]
    :---------------------:#_CAMERA_ARRAY_MEMBER_INDEXES_#:[39P]
    #__CAMERA_CONTROL__# :--------------------------------:[39P]
                                                          |[39P]
        The camera controller. This controller should     |[39P]
        only zoom in and out. The position of the camera  |[39P]
        should be based on where the[ player_in_focus ]   |[39P]
        currently is. ( AKA : The marionette index ).     |[39P]
                                                          |[39P]
    :--------------------------------:#__CAMERA_CONTROL__#:[39P]
    #__KEYBOARD_CONTROL__# :------------------------------:[39P]
                                                          |[39P]
        Rather than directly wiring the player controller |[39P]
        to the event listener, we are going to add a      |[39P]
        bit more indirection now that the code is         |[39P]
        getting a bit more sophisticated.                 |[39P]
                                                          |[39P]
        The "keyboard controller" calls                   |[39P]
        the two "sub controllers" :                       |[39P]
                                                          |[39P]
            1. Player Controller ( F _ PLAYER_CONTROL )   |[39P]
            2. Camera Controller ( F _ CAMERA_CONTROL )   |[39P]
                                                          |[39P]
    :------------------------------:#__KEYBOARD_CONTROL__#:[39P]

                                                           [---]
*** ******************* #__DOC_SEC__#:[004_POI]:**/ // [004_POI]    
                                                    // [---=---]
</script><!-- //////////////////////////////////////// [003_POI][002_POI][001_POI] -->

